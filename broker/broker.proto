syntax = "proto3";

import "github.com/golang/protobuf/ptypes/empty/empty.proto";

message Tenant{
    string Name = 1;
    string Provider = 2;
}

message TenantList{
    repeated Tenant Tenants = 1;
}

service TenantService{
    rpc List (google.protobuf.Empty) returns (TenantList){}
    rpc Set (TenantName) returns (google.protobuf.Empty){}
    rpc Get (google.protobuf.Empty) returns (TenantName){}
}

message Image{
    string ID = 1;
    string Name = 2;
}

message Reference{
    string TenantID = 1;
    string ID = 2;
    string Name = 3;
}

message TenantName{
    string Name = 1;
}

message ImageList{
    repeated Image Images= 1;
}

message ImageListRequest{
    bool all = 1;
}

service ImageService{
    rpc List(ImageListRequest) returns (ImageList){}
}

// broker network create net1 --cidr="192.145.0.0/16" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" (par défault "192.168.0.0/24", on crée une gateway sur chaque réseau: gw_net1)
// broker network list
// broker network delete net1
// broker network inspect net1

message NetworkDefinition{
    string Name = 2;
    string CIDR = 3;
    GatewayDefinition Gateway = 4;
}

message GatewayDefinition{
    int32 CPU = 1;
    float RAM = 2;
    int32 Disk = 3;
    string ImageID = 5;
    string name = 6;
}

message Network{
    string ID = 1;
    string Name = 2;
    string CIDR = 3;
    string GatewayID = 4;
}


message NetworkList{
    repeated Network Networks = 1;
}

message NWListRequest{
    bool All =1;
}
service NetworkService{
    rpc Create(NetworkDefinition) returns (Network){}
    rpc List(NWListRequest) returns (NetworkList){}
    rpc Inspect(Reference) returns (Network) {}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
}

// broker host create host1 --net="net1" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" --public=true
// broker host list
// broker host inspect host1
// broker host create host2 --net="net1" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" --public=false

message HostDefinition{
    string Name = 2;
    string Network = 3;
    int32 CPUNumber = 4;
    float RAM = 6;
    int32 Disk = 7;
    string ImageID = 9;
    bool Public = 10;
    int32 GPUNumber = 11;
    float Freq = 12;
    bool Force = 13;
}

enum HostState {
    /*STOPPED host is stopped*/
	STOPPED = 0;
	/*STARTING host is starting*/
    STARTING = 1;
	/*STARTED host is started*/
	STARTED = 2;
	/*STOPPING host is stopping*/
	STOPPING = 3;
	/*ERROR host is in error state*/
	ERROR = 4;
  }

message Host{
    string ID = 1;
    string Name = 2;
    int32 CPU = 3;
    float RAM = 4;
    int32 Disk = 5;
    string PublicIP = 6;
    string PrivateIP = 7;
    HostState State = 8;
    string PrivateKey = 9;
    string GatewayID = 10;
    string OsKind = 11;
    repeated string AttachedVolumeNames = 12;
}

message HostStatus {
    string Name = 1;
    string Status = 2;
}

message HostList{
    repeated Host Hosts= 1;
}

message SshConfig{
    string User = 1;
    string Host = 2;
    string PrivateKey = 3;
    int32 Port = 4;
    SshConfig gateway = 5;
}

message HostListRequest{
    bool All = 1;
}

service HostService{
    rpc Create(HostDefinition) returns (Host){}
    rpc Inspect(Reference) returns (Host){}
    rpc Status(Reference) returns (HostStatus){}
    rpc List(HostListRequest) returns (HostList){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc Start(Reference) returns (google.protobuf.Empty){}
    rpc Stop(Reference) returns (google.protobuf.Empty){}
    rpc Reboot(Reference) returns (google.protobuf.Empty){}
    rpc Resize(HostDefinition) returns (Host){}
    rpc SSH(Reference) returns (SshConfig){}
}

message HostTemplate{
    string ID = 1;
    string Name = 2;
    int32 Cores = 3;
    int32 Ram = 4;
    int32 Disk = 5;
    int32 GPUs = 6;
    string GPUType = 7;
}

message TemplateList{
    repeated HostTemplate Templates = 1;
}

message TemplateListRequest{
    bool All = 1;
}

service TemplateService{
    rpc List(TemplateListRequest) returns (TemplateList){}
}

// broker volume create v1 --speed="SSD" --size=2000 (par default HDD, possible SSD, HDD, COLD)
// broker volume attach v1 host1 --path="/shared/data" --format="xfs" (par default /shared/v1 et ext4)
// broker volume detach v1
// broker volume delete v1
// broker volume inspect v1
// broker volume update v1 --speed="HDD" --size=1000

enum VolumeSpeed{
    COLD = 0;
    HDD = 1;
    SSD = 2;
}

message VolumeDefinition{
    string Name = 2;
    VolumeSpeed Speed = 3;
    int32 Size = 4;
}

message Volume{
    string ID = 1;
    string Name = 2;
    VolumeSpeed Speed = 3;
    int32 Size = 4;
}
//message VolumeInfo{
//    Volume Volume = 1;
//    VolumeAttachment Attachment = 2;
//
//}

message VolumeInfo{
    string ID = 1;
    string Name = 2;
    VolumeSpeed Speed = 3;
    int32 Size = 4;
    Reference Host = 5;
    string MountPath = 6;
    string Format = 7;
    string Device = 8;
}

message VolumeListRequest{
    bool All = 1;
}

message VolumeList{
    repeated Volume Volumes = 1;
}

message VolumeAttachment{
    Reference Volume = 2;
    Reference Host = 3;
    string MountPath = 4;
    string Format = 5;
    string Device = 6;
    bool DoNotFormat = 7;
}

message VolumeDetachment{
    Reference Volume = 1;
    Reference Host = 2;
}

service VolumeService{
    rpc Create(VolumeDefinition) returns (Volume) {}
    rpc Attach(VolumeAttachment) returns (google.protobuf.Empty) {}
    rpc Detach(VolumeDetachment) returns (google.protobuf.Empty){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc List(VolumeListRequest) returns (VolumeList) {}
    rpc Inspect(Reference) returns (VolumeInfo){}
}

// broker bucket|container create c1
// broker bucket|container mount c1 host1 --path="/shared/data" (utilisation de s3ql, par default /containers/c1)
// broker bucket|container umount c1 host1
// broker bucket|container delete c1
// broker bucket|container list
// broker bucket|container inspect C1

message Bucket{
    string Name = 1;
}

message BucketList{
    repeated Bucket Buckets = 1;
}

message BucketMountingPoint{
    string Bucket = 1;
    Reference Host = 2;
    string Path = 3;
}

service BucketService{
    rpc Create(Bucket) returns (google.protobuf.Empty){}
    rpc Mount(BucketMountingPoint) returns (google.protobuf.Empty){}
    rpc Unmount(BucketMountingPoint) returns (google.protobuf.Empty){}
    rpc Delete(Bucket) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (BucketList){}
    rpc Inspect(Bucket) returns (BucketMountingPoint){}
}

message SshCommand{
    Reference Host = 1;
    string Command = 2;
}
message SshCopyCommand{
    string Source = 1;
    string Destination = 2;
}

message SshResponse{
    string OutputStd = 1;
    string OutputErr = 2;
    int32 Status = 3;
}

service SshService{
    rpc Run(SshCommand) returns (SshResponse){}
    rpc Copy(SshCopyCommand) returns (SshResponse){}
}

// broker nas|share create share1 host1 --path="/shared/data"
// broker nas|share delete share1
// broker nas|share mount share1 host2 --path="/data"
// broker nas|share umount share1 host2
// broker nas|share list
// broker nas|share inspect share1

message ShareDefinition{
    string ID = 1;
    string Name = 2;
    Reference Host = 3;
    string Path = 4;
    string Type = 5;
    string Acls = 6;
}

message ShareList{
    repeated ShareDefinition ShareList = 1;
}

message ShareMountDefinition{
    Reference Host = 1;
    Reference Share = 2;
    string Path = 3;
    string Type = 4;
    string Options = 5;
}

message ShareMountList{
    ShareDefinition Share = 1;
    repeated ShareMountDefinition MountList = 2;
}

service ShareService{
    rpc Create(ShareDefinition) returns (ShareDefinition){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (ShareList){}
    rpc Mount(ShareMountDefinition) returns (ShareMountDefinition){}
    rpc Unmount(ShareMountDefinition) returns (google.protobuf.Empty){}
    rpc Inspect(Reference) returns (ShareMountList){}
}
