# Copyright 2018, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
component:
    name: Kubernetes
    suitableFor:
        host: no
        cluster: dcos,boh
    requirements:
        components:
            - docker
        clusterSizing:
            dcos:
                small:
                    minPrivateNodes: 2
                normal:
                    minPrivateNodes: 4
                large:
                    minPrivateNodes: 6
            boh:
                small:
                    minMasters: 1
                    minPrivateNodes: 1
                normal:
                    minMasters: 3
                    minPrivateNodes: 1
                large:
                    minMasters: 3
                    minPrivateNodes: 3
    install:
        dcos:
            add:
                #pace: package,cli+config
                pace: package,cli,config
                steps:
                    package:
                        targets:
                            masters: one
                        options:
                            small: |
                                {
                                    "kubernetes": {
                                        "node_count": 1,
                                        "reserved_resources": {
                                            "kube_cpus": 1,
                                            "kube_mem": 1024,
                                            "kube_disk": 512
                                        }
                                    }
                                }
                            normal: |
                                {
                                    "kubernetes": {
                                        "high_availability": true,
                                        "node_count": 1,
                                        "reserved_resources": {
                                            "kube_cpus": 1,
                                            "kube_mem": 1024,
                                            "kube_disk": 512
                                        }
                                    }
                                }
                            large: |
                                {
                                    "kubernetes": {
                                        "high_availability": true,
                                        "node_count": 3,
                                        "reserved_resources": {
                                            "kube_cpus": 1,
                                            "kube_mem": 1024,
                                            "kube_disk": 512
                                        }
                                    }
                                }

                        run: |
                            output=$({{.dcos}} package install --yes kubernetes {{.options}} 2>&1)
                            rc=$?
                            [ $rc -ne 0 ] && {
                                echo $output
                                echo $output | grep "already installed" &>/dev/null || exit $rc
                            }
                            exit 0

                    cli:
                        targets:
                            masters: all
                        run: |
                            {{.dcos}} package install --yes kubernetes --cli

                    config:
                        targets:
                            masters: all
                        run: |
                            wait_deploy_complete() {
                                while true; do
                                    {{.dcos}} kubernetes plan show deploy --json | jq .status | grep COMPLETE &>/dev/null && break
                                    sleep 20
                                done
                            }
                            export -f wait_deploy_complete
                            bg_start WDC 10 bash -c wait_deploy_complete || exit 513
                            bg_wait WDC 514
                            {{.dcos}} kubernetes kubeconfig --apiserver-url https://apiserver.kubernetes.l4lb.thisdcos.directory:6443 && \
                            {{.kubectl}} config set-cluster kubernetes --server https://apiserver.kubernetes.l4lb.thisdcos.directory:6443

            check: |
                {{.dcos}} kubernetes plan show deploy --json | jq .status | grep COMPLETE &>/dev/null

            remove: |
                pace: remove
                steps:
                    remove:
                        targets:
                            masters: one
                        run: |
                        {{.dcos}} package remove --yes kubernetes

        bash:
            check:
                pace: kubectl,nodes
                steps:
                    kubectl:
                        targets:
                            masters: one
                        run: |
                            which kubectl &>/dev/null && [ $(kubectl get nodes | wc -l) -gt 1 ]
                    nodes:
                        targets:
                            privateNodes: all
                            publicNodes: all
                        run: |
                            ps ax | grep kubelet &>/dev/null

            add:
                pace: dir,commontools,cp-tools,cp-pkg,cp1-init,cpx-init,join
                steps:
                    dir:
                        targets:
                            masters: all
                        run: |
                            mkdir -p /opt/safescale/k8s/ssl /opt/safescale/k8s/config

                    commontools:
                        targets:
                            masters: all
                            privateNodes: all
                            publicNodes: all
                        run: |
                            cd /usr/local/bin
                            RELEASE="$(curl -sSL https://dl.k8s.io/release/stable.txt)"
                            curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/${RELEASE}/bin/linux/amd64/{kubeadm,kubelet,kubectl} || exit 513
                            chmod +x {kubeadm,kubelet,kubectl}

                            cat >/etc/systemd/system/kubelet.service <<-'EOF'
                            [Unit]
                            Description=kubelet: The Kubernetes Node Agent
                            Documentation=http://kubernetes.io/docs/

                            [Service]
                            ExecStart=/usr/local/bin/kubelet
                            Restart=always
                            StartLimitInterval=0
                            RestartSec=10

                            [Install]
                            WantedBy=multi-user.target
                            EOF

                            mkdir -p /etc/systemd/system/kubelet.service.d
                            cat >/etc/systemd/system/kubelet.service.d/10-kubeadm.conf <<-'EOF'
                            [Service]
                            Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
                            Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
                            # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
                            EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
                            # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
                            # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
                            EnvironmentFile=-/etc/default/kubelet
                            ExecStart=
                            ExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
                            EOF

                            systemctl enable kubelet && systemctl start kubelet || exit 516

                    cp-tools:
                        targets:
                            masters: all
                        run: |
                            cd /usr/local/bin

                            CRI_VERSION=v1.12.0
                            url=https://github.com/kubernetes-sigs/cri-tools/releases/download/$CRI_VERSION/crictl-${CRI_VERSION}-linux-amd64.tar.gz &&
                            download $url crictl.tgz 5m 5 && tar zxvf crictl.tgz -C /usr/local/bin || exit 513
                            rm -f crictl.tgz

                            CNI_VERSION=v0.7.1
                            url=https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-amd64-${CNI_VERSION}.tgz
                            download $url cni-plugins.tgz 5m 5 && tar zxvf cni-plugins.tgz || exit 514
                            rm -f cni-plugins.tgz

                            chmod +rx *

                    cp-pkg:
                        targets:
                            masters: all
                        run: |
                            case $LINUX_KIND in
                                debian|ubuntu)
                                    wait_for_apt && apt install -y ebtables socat
                                    ;;
                                redhat|centos)
                                    yum install -y ebtables socat
                                    ;;
                                *)
                                    echo "Unmanaged Linux distribution"
                                    exit 1
                                    ;;
                            esac

                    cp1-init:
                        targets:
                            masters: one
                        run: |
                            # Gather the stable release of K8S
                            RELEASE="$(curl -sSL https://dl.k8s.io/release/stable.txt)"

                            cd /opt/safescale/k8s/config
                            cat >kubeadm-bootstrap.config.yaml <<-EOF
                            apiVersion: kubeadm.k8s.io/v1alpha2
                            kind: MasterConfiguration
                            kubernetesVersion: $RELEASE
                            apiServerCertSANs:
                                - "{{.GatewayIP}}"
                            api:
                                controlPlaneEndpoint: "{{.GatewayIP}}:6443"
                            etcd:
                                local:
                                    extraArgs:
                                        listen-client-urls: "https://127.0.0.1:2379,https://{{.HostIP}}:2379"
                                        advertise-client-urls: "https://{{.HostIP}}:2379"
                                        listen-peer-urls: "https://{{.HostIP}}:2380"
                                        initial-advertise-peer-urls: "https://{{.HostIP}}:2380"
                                        initial-cluster: "{{.Hostname}}=https://{{.HostIP}}:2380"
                                    serverCertSANs:
                                        - {{.Hostname}}
                                        - {{.HostIP}}
                                    peerCertSANs:
                                        - {{.Hostname}}
                                        - {{.HostIP}}
                            networking:
                                podSubnet: "10.100.0.0/16"
                            EOF
                            cat >kubeadm-k8s-cpx.config.template <<-EOF
                            apiVersion: kubeadm.k8s.io/v1alpha2
                            kind: MasterConfiguration
                            kubernetesVersion: $RELEASE
                            apiServerCertSANs:
                                - "{{.GatewayIP}}"
                            api:
                                controlPlaneEndpoint: "{{.GatewayIP}}:6443"
                            etcd:
                                local:
                                    extraArgs:
                                        listen-client-urls: "https://127.0.0.1:2379,https://##HOSTIP##:2379"
                                        advertise-client-urls: "https://##HOSTIP##:2379"
                                        listen-peer-urls: "https://##HOSTIP##:2380"
                                        initial-advertise-peer-urls: "https://##HOSTIP##:2380"
                                        initial-cluster: "{{.Hostname}}=https://{{.HostIP}}:2380,##HOSTNAME##=https://##HOSTIP##:2380"
                                        initial-cluster-state: existing
                                    serverCertSANs:
                                        - ##HOSTNAME##
                                        - ##HOSTIP##
                                    peerCertSANs:
                                        - ##HOSTNAME##
                                        - ##HOSTIP##
                                networking:
                                    podSubnet: "10.100.0.0/16"
                            EOF
                            cat >etcd-join.sh.template <<-'EOF'
                                export KUBECONFIG=/etc/kubernetes/admin.conf
                                kubectl exec -n kube-system etcd-##HOSTNAME## -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://{{.HostIP}}:2379 member add ##HOSTNAME## https://##HOSTIP##:2380
                            EOF

                            kubeadm config images pull && \
                            kubeadm init --config kubeadm-bootstrap.config.yaml || exit $?

                            cp /etc/kubernetes/pki/ca.crt ../ssl
                            cp /etc/kubernetes/pki/ca.key ../ssl
                            cp /etc/kubernetes/pki/sa.key ../ssl
                            cp /etc/kubernetes/pki/sa.pub ../ssl
                            cp /etc/kubernetes/pki/front-proxy-ca.crt ../ssl
                            cp /etc/kubernetes/pki/front-proxy-ca.key ../ssl
                            cp /etc/kubernetes/pki/etcd/ca.crt ../ssl/etcd-ca.crt
                            cp /etc/kubernetes/pki/etcd/ca.key ../ssl/etcd-ca.key
                            cp /etc/kubernetes/admin.conf .

                            for host in {{range .MasterIPs}}{{.}} {{end}}; do
                                [ "$host" = "{{.HostIP}}"] && continue
                                scp ../ssl/* $host:/opt/safescale/k8s/ssl || exit $?
                                scp admin.conf $host:/opt/safescale/k8s/config || exit $?
                                sed -e 's/##HOSTIP##/$host/g' kubeadm-k8s-cpx.config.yaml.template >/tmp/kubeadm-k8s-cpx.config.yaml
                                scp /tmp/kubeadm-k8s-cpx.config.yaml etcd-join.sh.template $host:/opt/safescale/k8s/config || exit $?
                            done
                            rm -f /tmp/kubeadm-k8scpx.config.yaml

                    cpx-init:
                        targets:
                            masters: all
                        run: |
                            cd /opt/safescale/k8s/config
                            [ -f kubeadm-k8s-cpx.config.yaml ] && {
                                mkdir -p /etc/kubernetes/pki/etcd
                                cp ../ssl/ca.crt /etc/kubernetes/pki/
                                cp ../ssl/ca.key /etc/kubernetes/pki/
                                cp ../ssl/sa.pub /etc/kubernetes/pki/
                                cp ../ssl/sa.key /etc/kubernetes/pki/
                                cp ../ssl/front-proxy-ca.crt /etc/kubernetes/pki/
                                cp ../ssl/front-proxy-ca.key /etc/kubernetes/pki/
                                cp ../ssl/etcd-ca.crt /etc/kubernetes/pki/etcd/ca.crt
                                cp ../ssl/etcd-ca.key /etc/kubernetes/pki/etcd/ca.key
                                cp admin.conf /etc/kubernetes/admin.conf

                                kubeadm alpha phase certs all --config kubeadm-k8s-cpx.config.yaml && \
                                kubeadm alpha phase kubelet config write-to-disk --config kubeadm-k8s-cpx.config.yaml && \
                                kubeadm alpha phase kubelet write-env-file --config kubeadm-k8s-cpx.config.yaml && \
                                kubeadm alpha phase kubeconfig kubelet --config kubeadm-k8s-cpx.config.yaml && \
                                systemctl start kubelet || exit $?

                                # "realize" the etcd-join template to a working script then executes it and starts k8s master
                                sed -e 's/##HOSTNAME##/{{.Hostname}}' -e 's/##HOSTIP##/{{.HostIP}}' etcd-join.sh.template >etcd-join.sh
                                bash ./etcd-join.sh && \
                                kubeadm alpha phase etcd local --config kubeadm-k8s-cpx.config.yaml && \
                                kubeadm alpha phase kubeconfig all --config kubeadm-k8s-cpx.config.yaml && \
                                kubeadm alpha phase controlplane all --config kubeadm-k8s-cpx.config.yaml
                                kubeadm alpha phase mark-master --config kubeadm-k8s-cpx.config.yaml || exit $?
                                rm -f etcd-join.sh
                            }
                            cp -rd ~/.kube ~{{.Username}} && \
                            chown -R {{.Username}}:{{.Username}} ~{{.Username}}/.kube && \
                            chmod -R go-rwx ~{{.Username}}/.kube

                    join:
                        targets:
                            privateNodes: all
                            publicNodes: all
                        run: |
                            MASTERIP=
                            for m in {{- range .MasterIPs }}{{.}} {{ end -}}; do
                                TOKEN=$(ssh $m kubeadm token create)
                                [ $? -ne 0 ] && continue
                                HASH=$(ssh $m openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')
                                MASTERIP=$m
                                break
                            done
                            [ -z "$MASTERIP" ] && echo "failed to find available master to register with. Aborted." && exit 513
                            kubeadm join --token $TOKEN $MASTERIP:2073 --discovery-token-ca-cert-hash sha256:$HASH

            remove:
                pace: node,reset,clean
                steps:
                    node:
                        targets:
                            masters: one
                        run: |
                            kubectl drain {{.Hostname}} --delete-local-data --force --ignore-daemonsets
                            kubectl delete node {{.Hostname}}

                    reset:
                        targets:
                            masters: one
                        run: |
                            kubeadm reset

                    clean:
                        targets:
                            masters: all
                            privateNodes: all
                            publicNodes: all
                        run: |
                            rm -rf /opt/safescale/k8s
                            rm -rf /usr/local/bin/kube*

    proxy:
        rules:
            - name: k8s-upstream
              type: upstream
              targets:
                  masters: all
              content: |
                  {
                      "name": "k8s-CPs",
                      "target": "{{.HostIP}}:6443",
                      "weigth": 100,
                  }

            - name: k8s-service
              type: service
              targets:
                  masters: any
              content: |
                  {
                      "name": "k8s-CP-{{.Hostname}}",
                      "host": "k8s-CPs",
                      "path": "/"
                  }

            - name: k8s-route
              type: route
              targets:
                  masters: any
              content: |
                  {
                      "hosts": ["{{.CIDR}}"],
                      "service": { "id": "k8s-service" }
                  }

...