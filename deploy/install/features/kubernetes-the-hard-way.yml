# Copyright 2018, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
feature:
    name: Kubernetes
    suitableFor:
        host: no
        cluster: boh,k8s
    requirements:
        packages:
            - docker
    install:
        bash:
            check: |
                kubectl get nodes

            add: |
                pace: dir,tools,opscerts,CA2nodes,workercerts,opsconf,workerconf
                steps:
                    dir:
                        targets:
                            masters: all
                            privateNodes: all
                            publicNodes: all
                        run: |
                            mkdir -p /opt/safescale/k8s/ssl /opt/safescale/k8s/config

                    tools:
                        targets:
                            masters: all
                            privateNodes: all
                            publicNodes: all
                        run: |
                            cd /usr/local/bin
                            wget -q --https-only --timestamping \
                                    https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 \
                                    https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
                            mv cfssl_linux-amd64 cfssl
                            mv cfssljson_linux-amd64 cfssljson
                            wget -q https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/linux/amd64/kube-apiserver \
                                    https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/linux/amd64/kube-controller-manager \
                                    https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/linux/amd64/kube-scheduler \
                                    https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/linux/amd64/kubectl
                            chmod +rx cfssl cfssljson kube-apiserver kube-controller-manager kube-scheduler kubectl

                    opscerts:
                        targets:
                            masters: one
                        run: |
                            export PATH=~cladm/.local/bin:$PATH
                            cd /opt/safescale/k8s/ssl

                            cat >ca-config.json <<-'EOF'
                            {
                                "signing": {
                                    "default": {
                                        "expiry": "8760h"
                                    },
                                    "profiles": {
                                        "kubernetes": {
                                            "usages": ["signing", "key encipherment", "server auth", "client auth"],
                                            "expiry": "8760h"
                                        }
                                    }
                                }
                            }
                            EOF
                            cat >ca-csr.json <<-'EOF'
                            {
                                "CN": "Kubernetes",
                                "key": {
                                    "algo": "rsa",
                                    "size": 2048
                                },
                                "names": [
                                    {
                                        "C": "FR",
                                        "L": "Toulouse",
                                        "O": "Kubernetes",
                                        "OU": "C-S:SafeScale",
                                        "ST": "Occitanie"
                                    }
                                ]
                            }
                            EOF
                            cfssl gencert -initca ca-csr.json | cfssljson -bare ca

                            cat >kube-controller-manager-csr.json <<EOF
                            {
                                "CN": "system:kube-controller-manager",
                                "key": {
                                    "algo": "rsa",
                                    "size": 2048
                                },
                                "names": [
                                    {
                                        "C": "US",
                                        "L": "Portland",
                                        "O": "system:kube-controller-manager",
                                        "OU": "Kubernetes The Hard Way",
                                        "ST": "Oregon"
                                    }
                                ]
                            }
                            EOF
                            cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \
                                          -profile=kubernetes \
                                          kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager

                            cat >kube-proxy-csr.json <<EOF
                            {
                                "CN": "system:kube-proxy",
                                "key": {
                                    "algo": "rsa",
                                    "size": 2048
                                },
                                "names": [
                                    {
                                    "C": "FR",
                                    "L": "Toulouse",
                                    "O": "system:node-proxier",
                                    "OU": "C-S:SafeScale",
                                    "ST": "Occitanie"
                                    }
                                ]
                            }
                            EOF
                            cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \
                                          -profile=kubernetes \
                                          kube-proxy-csr.json | cfssljson -bare kube-proxy

                            cat >admin-csr.json <<-'EOF'
                            {
                                "CN": "admin",
                                "key": {
                                    "algo": "rsa",
                                    "size": 2048
                                },
                                "names": [
                                    {
                                        "C": "FR",
                                        "L": "Toulouse",
                                        "O": "system:masters",
                                        "OU": "C-S:SafeScale",
                                        "ST": "Occitanie"
                                    }
                                ]
                            }
                            EOF
                            cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \
                                          -profile=kubernetes \
                                          admin-csr.json | cfssljson -bare admin

                            cat >kube-scheduler-csr.json <<-'EOF'
                            {
                                "CN": "system:kube-scheduler",
                                "key": {
                                    "algo": "rsa",
                                    "size": 2048
                                },
                                "names": [
                                    {
                                        "C": "FR",
                                        "L": "Toulouse",
                                        "O": "system:kube-scheduler",
                                        "OU": "C-S:SafeScale",
                                        "ST": "Occitanie"
                                    }
                                ]
                            }
                            EOF
                            cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \
                                          -profile=kubernetes \
                                          kube-scheduler-csr.json | cfssljson -bare kube-scheduler


                            cat >kubernetes-csr.json <<-'EOF'
                            {
                                "CN": "kubernetes",
                                "key": {
                                    "algo": "rsa",
                                    "size": 2048
                                },
                                "names": [
                                    {
                                        "C": "FR",
                                        "L": "Toulouse",
                                        "O": "Kubernetes",
                                        "OU": "C-S:SafeScale",
                                        "ST": "Occitanie"
                                    }
                                ]
                            }
                            EOF
                            cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \
                                          -profile=kubernetes \
                                          -hostname=10.32.0.1,10.240.0.10,10.240.0.11,10.240.0.12,127.0.0.1,kubernetes.default \
                                          kubernetes-csr.json | cfssljson -bare kubernetes

                            for i in {{- range .MasterIPs }}{{.}} {{ end -}}; do
                                [ "$i" = "{{.HostIP}}" ] && continue
                                scp ca.pem ca-key.pem kubernetes.pem kubernetes-key.pem \
                                    service-account-key.pem service-account.pem \
                                    $i:/opt/safescale/k8s/ssl
                            done
                            {{- if .PrivNodeIPs }}
                            for i in {{- range .PrivNodeIPs }}{{.}} {{ end -}}; do
                                scp ca.pem $i:/opt/safescale/k8s/ssl
                            done
                            {{- end -}}
                            for i in {{- range .PubNodeIPs -}}{{.}} {{- end -}}; do
                                scp ca.pem $i:/opt/safescale/k8s/ssl
                            done

                    workercerts:
                        targets:
                            privateNodes: all
                            publicNodes: all
                        run: |
                            cat > {{.Hostname}}-csr.json <<EOF
                            {
                                "CN": "system:node:{{.Hostname}}",
                                "key": {
                                    "algo": "rsa",
                                    "size": 2048
                                },
                                "names": [
                                    {
                                        "C": "FR",
                                        "L": "Toulouse",
                                        "O": "system:nodes",
                                        "OU": "C-S:SafeScale",
                                        "ST": "Occitanie"
                                    }
                                ]
                            }
                            EOF
                            cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \
                                          -profile=kubernetes \
                                          -hostname={{.Hostname}},{{.HostIP}} \
                                          {{.Hostname}-csr.json | cfssljson -bare {{.Hostname}}

                            cat >service-account-csr.json <<EOF
                            {
                                "CN": "service-accounts",
                                "key": {
                                    "algo": "rsa",
                                    "size": 2048
                                },
                                "names": [
                                    {
                                        "C": "FR",
                                        "L": "Toulouse",
                                        "O": "Kubernetes",
                                        "OU": "C-S:SafeScale",
                                        "ST": "Occitanie"
                                    }
                                ]
                            }
                            EOF
                            cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \
                                          -profile=kubernetes \
                                          service-account-csr.json | cfssljson -bare service-account

                    workerconf:
                        targets:
                            privateNodes: all
                            publicNodes: all
                        run: |
                            export PATH=~cladm/.local/bin:PATH
                            cd /opt/safescale/k8s/config
                            kubectl config set-cluster kubernetes \
                                --certificate-authority=../ssl/ca.pem \
                                --embed-certs=true \
                                --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \
                                --kubeconfig={{.Hostname}.kubeconfig
                            kubectl config set-credentials system:node:{{.Hostname}} \
                                --client-certificate=../ssl/{{.Hostname}}.pem \
                                --client-key={{.Hostname}}-key.pem \
                                --embed-certs=true \
                                --kubeconfig={{.Hostname}}.kubeconfig
                            kubectl config set-context default \
                                --cluster=kubernetes \
                                --user=system:node:{{.Hostname}} \
                                --kubeconfig={{.Hostname}}.kubeconfig
                            kubectl config use-context default --kubeconfig={{.Hostname}}.kubeconfig

                            kubectl config set-cluster kubernetes \
                                --certificate-authority=../ssl/ca.pem \
                                --embed-certs=true \
                                --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \
                                --kubeconfig=kube-proxy.kubeconfig
                            kubectl config set-credentials system:kube-proxy \
                                --client-certificate=../ssl/kube-proxy.pem \
                                --client-key=../ssl/kube-proxy-key.pem \
                                --embed-certs=true \
                                --kubeconfig=kube-proxy.kubeconfig
                            kubectl config set-context default \
                                --cluster=kubernetes \
                                --user=system:kube-proxy \
                                --kubeconfig=kube-proxy.kubeconfig
                            kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig

                    opsconf:
                        targets:
                            masters: one
                        run: |
                            kubectl config set-cluster kubernetes \
                                --certificate-authority=../ssl/ca.pem \
                                --embed-certs=true \
                                --server=https://127.0.0.1:6443 \
                                --kubeconfig=kube-controller-manager.kubeconfig
                            kubectl config set-credentials system:kube-controller-manager \
                                --client-certificate=../ssl/kube-controller-manager.pem \
                                --client-key=../ssl/kube-controller-manager-key.pem \
                                --embed-certs=true \
                                --kubeconfig=kube-controller-manager.kubeconfig
                            kubectl config set-context default \
                                --cluster=kubernetes \
                                --user=system:kube-controller-manager \
                                --kubeconfig=kube-controller-manager.kubeconfig
                            kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig

                            kubectl config set-cluster kubernetes-the-hard-way \
                                --certificate-authority=../ssl/ca.pem \
                                --embed-certs=true \
                                --server=https://127.0.0.1:6443 \
                                --kubeconfig=kube-scheduler.kubeconfig
                            kubectl config set-credentials system:kube-scheduler \
                                --client-certificate=../ssl/kube-scheduler.pem \
                                --client-key=../ssl/kube-scheduler-key.pem \
                                --embed-certs=true \
                                --kubeconfig=kube-scheduler.kubeconfig
                            kubectl config set-context default \
                                --cluster=kubernetes \
                                --user=system:kube-scheduler \
                                --kubeconfig=kube-scheduler.kubeconfig
                            kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig

                            kubectl config set-cluster kubernetes-the-hard-way \
                                --certificate-authority=ca.pem \
                                --embed-certs=true \
                                --server=https://127.0.0.1:6443 \
                                --kubeconfig=admin.kubeconfig
                            kubectl config set-credentials admin \
                                --client-certificate=admin.pem \
                                --client-key=admin-key.pem \
                                --embed-certs=true \
                                --kubeconfig=admin.kubeconfig
                            kubectl config set-context default \
                                --cluster=kubernetes-the-hard-way \
                                --user=admin \
                                --kubeconfig=admin.kubeconfig
                            kubectl config use-context default --kubeconfig=admin.kubeconfig

                            for i in {{- range .MasterIPs }}{{.}} {{ end -}}; do
                                [ "$i" = "{{.HostIP}}" ] && continue
                                scp admin.kubeconfig kube-controller-manager.kubeconfig kube-scheduler.kubeconfig \
                                    $i:/opt/safescale/k8s/conf
                            done

                    keys:
                        targets:
                            masters: one
                        run: |
                            cd /opt/safescale/k8s/conf
                            ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)
                            cat >encryption-config.yaml <<-EOF
                            kind: EncryptionConfig
                            apiVersion: v1
                            resources:
                            - resources:
                                - secrets
                                providers:
                                - aescbc:
                                    keys:
                                        - name: key1
                                        secret: ${ENCRYPTION_KEY}
                                - identity: {}
                            EOF
                            for i in {{- range .MasterIPs }}{{.}} {{ end -}}; do
                                [ "$i" = "{{.HostIP}}" ] && continue
                                scp encryption-config.yaml $i:/opt/safescale/k8s/conf
                            done

                    etcd:
                        targets:
                            masters: all
                        run: |
                            wget -q --https-only --timestamping \
                                "https://github.com/coreos/etcd/releases/download/v3.3.5/etcd-v3.3.5-linux-amd64.tar.gz"
                            tar -xvf etcd-v3.3.5-linux-amd64.tar.gz && \
                            mv etcd-v3.3.5-linux-amd64/etcd* /usr/local/bin/ || exit $?
                            mkdir -p /etc/etcd /var/lib/etcd
                            ( cd /opt/safescale/k8s/ssl; cp ca.pem kubernetes-key.pem kubernetes.pem /etc/etcd/ )
                            cat >/etc/systemd/system/etcd.service <<-EOF
                            [Unit]
                            Description=etcd
                            Documentation=https://github.com/coreos

                            [Service]
                            ExecStart=/usr/local/bin/etcd \\
                            --name {{.Hostname}} \\
                            --cert-file=/etc/etcd/kubernetes.pem \\
                            --key-file=/etc/etcd/kubernetes-key.pem \\
                            --peer-cert-file=/etc/etcd/kubernetes.pem \\
                            --peer-key-file=/etc/etcd/kubernetes-key.pem \\
                            --trusted-ca-file=/etc/etcd/ca.pem \\
                            --peer-trusted-ca-file=/etc/etcd/ca.pem \\
                            --peer-client-cert-auth \\
                            --client-cert-auth \\
                            --initial-advertise-peer-urls https://{{.HostIP}}:2380 \\
                            --listen-peer-urls https://{{.HostIP}}:2380 \\
                            --listen-client-urls https://{{.HostIP}}:2379,https://127.0.0.1:2379 \\
                            --advertise-client-urls https://{{.HostIP}}:2379 \\
                            --initial-cluster-token etcd-cluster-0 \\
                            --initial-cluster controller-0=https://10.240.0.10:2380,controller-1=https://10.240.0.11:2380,controller-2=https://10.240.0.12:2380 \\
                            --initial-cluster-state new \\
                            --data-dir=/var/lib/etcd
                            Restart=on-failure
                            RestartSec=5

                            [Install]
                            WantedBy=multi-user.target
                            EOF
                            systemctl daemon-reload
                            systemctl enable etcd
                            systemctl start etcd

                    ctlplane:
                        targets:
                            masters: one
                        run: |
                            mkdir -p /etc/kubernetes/config /var/lib/kubernetes/
                            cp ca.pem ca-key.pem kubernetes-key.pem kubernetes.pem \
                               service-account-key.pem service-account.pem \
                               encryption-config.yaml /var/lib/kubernetes/
                            cat >/etc/systemd/system/kube-apiserver.service <<-EOF
                            [Unit]
                            Description=Kubernetes API Server
                            Documentation=https://github.com/kubernetes/kubernetes

                            [Service]
                            ExecStart=/usr/local/bin/kube-apiserver \\
                            --advertise-address=${INTERNAL_IP} \\
                            --allow-privileged=true \\
                            --apiserver-count=3 \\
                            --audit-log-maxage=30 \\
                            --audit-log-maxbackup=3 \\
                            --audit-log-maxsize=100 \\
                            --audit-log-path=/var/log/audit.log \\
                            --authorization-mode=Node,RBAC \\
                            --bind-address=0.0.0.0 \\
                            --client-ca-file=/var/lib/kubernetes/ca.pem \\
                            --enable-admission-plugins=Initializers,NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\
                            --enable-swagger-ui=true \\
                            --etcd-cafile=/var/lib/kubernetes/ca.pem \\
                            --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\
                            --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\
                            --etcd-servers=https://10.240.0.10:2379,https://10.240.0.11:2379,https://10.240.0.12:2379 \\
                            --event-ttl=1h \\
                            --experimental-encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \\
                            --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \\
                            --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \\
                            --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \\
                            --kubelet-https=true \\
                            --runtime-config=api/all \\
                            --service-account-key-file=/var/lib/kubernetes/service-account.pem \\
                            --service-cluster-ip-range=10.32.0.0/24 \\
                            --service-node-port-range=30000-32767 \\
                            --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\
                            --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\
                            --v=2
                            Restart=on-failure
                            RestartSec=5

                            [Install]
                            WantedBy=multi-user.target
                            EOF
...