/*
 * Copyright 2018-2019, CS Systemes d'Information, http://www.c-s.fr
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dcos

import (
	"encoding/gob"
	"fmt"

	clusterapi "github.com/CS-SI/SafeScale/perform/cluster/api"
	"github.com/CS-SI/SafeScale/perform/cluster/api/NodeType"
	"github.com/CS-SI/SafeScale/providers/api"
)

// node describes a Node
type node struct {
	clusterapi.Node
}

// Shutdown shuts down a node
func (n *node) Shutdown() error {
	return fmt.Errorf("not implemented yet")
}

// Reboot reboots a node
func (n *node) Reboot() error {
	return fmt.Errorf("not implemented yet")
}

// Bboot boots a shutdowned node
func (n *node) Boot() error {
	return fmt.Errorf("not implemented yet")
}

// master describe a master
type master struct {
	clusterapi.Master
}

// Enable enables a master
func (m *master) Enable() error {
}

// Disables disable a master
func (m *master) Disable() error {
	return fmt.Errorf("not yet implemented")

}

// PrivateNode describes a private node in DCOS context
type privateNode node

func newPrivateNode(host *api.Host) *privateNode {
	if host == nil {
		panic("host is nil!")
	}
	return &privateNode{
		Host: host,
		Type: NodeType.PrivateNode,
	}
}

// Prepare "converts" an host describe in object to act as a Private Node
// ex:
//     node := newPrivateNode(id)
//     node.Prepare()
func (c *privateNode) Prepare() error {
	if c.Node.Host == nil {
		panic("c.Node.Host is nil!")
	}
	return nil
}

// Join configures the Node as a DCOS node and enables it for duty
func (n *privateNode) Join(cluster *clusterapi.Cluster) error {
	if cluster == nil {
		panic("cluster is nil!")
	}

	n.Node.Cluster = cluster

	return nil
}

// PublicNode describes a public node in DCOS context
type publicNode node

// Prepare "converts" an host describe in object to act as a Public Node
// ex:
//     node := PublicNode{ID: id}
//     err := node.Install()
func (c *publicNode) Prepare() error {
	c.Type = NodeType.PublicNode
	return nil
}

func init() {
	gob.Register(node{})
	gob.Register(privateNode{})
	gob.Register(publicNode{})
	gob.Register(master{})
}
