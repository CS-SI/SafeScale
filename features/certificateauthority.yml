# Copyright 2018-2020, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
feature:
    suitableFor:
        host: yes
        cluster: all

    parameters:
        - CountryName=FR
        - StateOrProvinceName=Haute-Garonne
        - LocalityName=Toulouse
        - OrganizationName=CS-Group
        - OrganizationalUnitName=SafeScale
        - EmailAddress=

    install:
        bash:
            check:
                pace: chainca
                steps:
                    chainca:
                        targets:
                            hosts: yes
                            masters: all
                        run: |
                            [ ! -f ${SF_ETCDIR}/pki/ca/signca/certs/chain-ca.cert.pem ] && sfFail 193
                            sfExit

            add:
                pace: config,rootca,signca,chainca,spread-on-masters,spread-on-others,register
                steps:
                    config:
                        targets:
                            hosts: yes
                            masters: one
                        run: |
                            mkdir -p ${SF_ETCDIR}/pki/ca/rootca/{certs,crl,newcerts,private}
                            mkdir -p ${SF_ETCDIR}/pki/ca/signca/{certs,crl,csr,newcerts,private}

                            chmod 0700 ${SF_ETCDIR}/pki/ca/rootca/private
                            touch ${SF_ETCDIR}/pki/ca/rootca/index.txt
                            touch ${SF_ETCDIR}/pki/ca/rootca/index.txt.attr
                            echo 1000 >${SF_ETCDIR}/pki/ca/rootca/serial

                            chmod 0700 ${SF_ETCDIR}/pki/ca/signca/private
                            touch ${SF_ETCDIR}/pki/ca/signca/index.txt
                            touch ${SF_ETCDIR}/pki/ca/signca/index.txt.attr
                            echo 1000 >${SF_ETCDIR}/pki/ca/signca/serial
                            echo 1000 >${SF_ETCDIR}/pki/ca/signca/crlnumber

                            cat >${SF_ETCDIR}/pki/ca/rootca/openssl.cnf <<-EOF
                            [ ca ]
                            default_ca = CA_default

                            [ CA_default ]
                            # Directory and file locations.
                            dir               = ${SF_ETCDIR}/pki/ca/rootca
                            certs             = \$dir/certs
                            crl_dir           = \$dir/crl
                            new_certs_dir     = \$dir/newcerts
                            database          = \$dir/index.txt
                            serial            = \$dir/serial
                            RANDFILE          = \$dir/private/.rand

                            # The root key and root certificate.
                            private_key       = \$dir/private/rootca.key.pem
                            certificate       = \$dir/certs/rootca.cert.pem

                            # For certificate revocation lists.
                            crlnumber         = \$dir/crlnumber
                            crl               = \$dir/crl/rootca.crl.pem
                            crl_extensions    = crl_ext
                            default_crl_days  = 30

                            # SHA-1 is deprecated, so use SHA-2 instead.
                            default_md        = sha256

                            name_opt          = ca_default
                            cert_opt          = ca_default
                            default_days      = 375
                            preserve          = no
                            policy            = policy_strict

                            [ policy_strict ]
                            # The root CA should only sign signca certificates that match.
                            # See the POLICY FORMAT section of 'man ca'.
                            countryName             = match
                            stateOrProvinceName     = match
                            organizationName        = match
                            organizationalUnitName  = optional
                            commonName              = supplied
                            emailAddress            = optional

                            [ policy_loose ]
                            # Allow the signca CA to sign a more diverse range of certificates.
                            # See the POLICY FORMAT section of the 'ca' man page.
                            countryName             = optional
                            stateOrProvinceName     = optional
                            localityName            = optional
                            organizationName        = optional
                            organizationalUnitName  = optional
                            commonName              = supplied
                            emailAddress            = optional

                            [ req ]
                            # Options for the 'req' tool (man req).
                            default_bits        = 4096
                            distinguished_name  = req_distinguished_name
                            string_mask         = utf8only

                            # SHA-1 is deprecated, so use SHA-2 instead.
                            default_md          = sha256

                            # Extension to add when the -x509 option is used.
                            x509_extensions     = v3_ca

                            [ req_distinguished_name ]
                            # See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
                            countryName                     = Country Name (2 letter code)
                            stateOrProvinceName             = State or Province Name
                            localityName                    = Locality Name
                            0.organizationName              = Organization Name
                            organizationalUnitName          = Organizational Unit Name
                            commonName                      = Common Name
                            emailAddress                    = Email Address

                            # Optionally, specify some defaults.
                            countryName_default             = {{ .CountryName }}
                            stateOrProvinceName_default     = {{ .StateOrProvinceName }}
                            localityName_default            = {{ .LocalityName }}
                            0.organizationName_default      = {{ .OrganizationName }}
                            organizationalUnitName_default  = {{ .OrganizationalUnitName }}
                            emailAddress_default            = {{ .EmailAddress }}

                            [ v3_ca ]
                            # Extensions for a typical CA (man x509v3_config).
                            subjectKeyIdentifier = hash
                            authorityKeyIdentifier = keyid:always,issuer
                            basicConstraints = critical, CA:true
                            keyUsage = critical, digitalSignature, cRLSign, keyCertSign

                            [ v3_signca_ca ]
                            # Extensions for a typical signca CA (man x509v3_config).
                            subjectKeyIdentifier = hash
                            authorityKeyIdentifier = keyid:always,issuer
                            basicConstraints = critical, CA:true, pathlen:0
                            keyUsage = critical, digitalSignature, cRLSign, keyCertSign

                            [ usr_cert ]
                            # Extensions for client certificates (man x509v3_config).
                            basicConstraints = CA:FALSE
                            nsCertType = client, email
                            nsComment = "OpenSSL Generated Client Certificate"
                            subjectKeyIdentifier = hash
                            authorityKeyIdentifier = keyid,issuer
                            keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
                            extendedKeyUsage = clientAuth, emailProtection

                            [ server_cert ]
                            # Extensions for server certificates (man x509v3_config).
                            basicConstraints = CA:FALSE
                            nsCertType = server
                            nsComment = "OpenSSL Generated Server Certificate"
                            subjectKeyIdentifier = hash
                            authorityKeyIdentifier = keyid,issuer:always
                            keyUsage = critical, digitalSignature, keyEncipherment
                            extendedKeyUsage = serverAuth

                            [ crl_ext ]
                            # Extension for CRLs (man x509v3_config).
                            authorityKeyIdentifier=keyid:always

                            [ ocsp ]
                            # Extension for OCSP signing certificates (man ocsp).
                            basicConstraints = CA:FALSE
                            subjectKeyIdentifier = hash
                            authorityKeyIdentifier = keyid,issuer
                            keyUsage = critical, digitalSignature
                            extendedKeyUsage = critical, OCSPSigning
                            EOF

                            cp ${SF_ETCDIR}/pki/ca/rootca/openssl.cnf ${SF_ETCDIR}/pki/ca/signca

                            sed -E -i 's|^(dir\s+= \$\{SF_ETCDIR\}/pki/ca/)+.*$|\1signca|' ${SF_ETCDIR}/pki/ca/signca/openssl.cnf || sfFail 193 "Failure patching openssl.cnf"
                            sed -E -i 's|^(private_key\s+= \$dir/private/)+.*$|\1signca.key.pem|' ${SF_ETCDIR}/pki/ca/signca/openssl.cnf || sfFail 193 "Failure patching openssl.cnf"
                            sed -E -i 's|^(certificate\s+= \$dir/certs/)+.*$|\1signca.cert.pem|' ${SF_ETCDIR}/pki/ca/signca/openssl.cnf || sfFail 193 "Failure patching openssl.cnf"
                            sed -E -i 's|^(crl\s+= \$dir/crl/)+.*$|\1signca.crl.pem|' ${SF_ETCDIR}/pki/ca/signca/openssl.cnf || sfFail 193 "Failure patching openssl.cnf"
                            sed -E -i 's|^(policy\s+= policy_)+.*$|\1_loose|' ${SF_ETCDIR}/pki/ca/signca/openssl.cnf || sfFail 193 "Failure patching openssl.cnf"

                            sfExit

                    rootca:
                        targets:
                            hosts: yes
                            masters: one
                        run: |
                            openssl genrsa -out ${SF_ETCDIR}/pki/ca/rootca/private/rootca.key.pem 4096 || sfFail 193
                            chmod 0400 ${SF_ETCDIR}/pki/ca/rootca/private/rootca.key.pem || sfFail 194

                            SUBJ=
                            {{ if .CountryName            }} SUBJ="${SUBJ}/C={{.CountryName}}" {{ end }}
                            {{ if .StateOrProvinceName    }} SUBJ="${SUBJ}/ST={{.StateOrProvinceName}}" {{ end }}
                            {{ if .LocalityName           }} SUBJ="${SUBJ}/L={{.LocalityName}}" {{ end }}
                            {{ if .OrganizationName       }} SUBJ="${SUBJ}/O={{.OrganizationName}}" {{ end }}
                            {{ if .OrganizationalUnitName }} SUBJ="${SUBJ}/OU={{.OrganizationalUnitName}}" {{ end }}
                            {{ if .EmailAddress           }} SUBJ="${SUBJ}/emailAddress={{.EmailAddress}}" {{ end }}
                            {{ if .ClusterFlavor }}
                            SUBJ="${SUBJ}/CN={{ .ClusterName }}-rootCA"
                            {{ else }}
                            SUBJ="${SUBJ}/CN={{ .Hostname }}-rootCA"
                            {{ end }}
                            openssl req -config ${SF_ETCDIR}/pki/ca/rootca/openssl.cnf \
                                        -key ${SF_ETCDIR}/pki/ca/rootca/private/rootca.key.pem \
                                        -new -x509 -days 10000 -sha256 \
                                        -out ${SF_ETCDIR}/pki/ca/rootca/certs/rootca.cert.pem \
                                        -extensions v3_ca \
                                        -subj "$SUBJ" || sfFail 195
                            chmod 0444 ${SF_ETCDIR}/pki/ca/rootca/certs/rootca.cert.pem || sfFail 196
                            sfExit

                    signca:
                        targets:
                            hosts: yes
                            masters: one
                        run: |
                            openssl genrsa -out ${SF_ETCDIR}/pki/ca/signca/private/signca.key.pem 4096 || sfFail 197
                            chmod 400 ${SF_ETCDIR}/pki/ca/signca/private/signca.key.pem

                            SUBJ=
                            {{ if .CountryName            }} SUBJ="${SUBJ}/C={{.CountryName}}" {{ end }}
                            {{ if .StateOrProvinceName    }} SUBJ="${SUBJ}/ST={{.StateOrProvinceName}}" {{ end }}
                            {{ if .LocalityName           }} SUBJ="${SUBJ}/L={{.LocalityName}}" {{ end }}
                            {{ if .OrganizationName       }} SUBJ="${SUBJ}/O={{.OrganizationName}}" {{ end }}
                            {{ if .OrganizationalUnitName }} SUBJ="${SUBJ}/OU={{.OrganizationalUnitName}}" {{ end }}
                            {{ if .EmailAddress           }} SUBJ="${SUBJ}/emailAddress={{.EmailAddress}}" {{ end }}
                            {{ if .ClusterFlavor          }}
                            SUBJ="${SUBJ}/CN={{ .ClusterName }}-signCA"
                            {{ else }}
                            SUBJ="${SUBJ}/CN={{ .Hostname }}-signCA"
                            {{ end }}
                            openssl req -config ${SF_ETCDIR}/pki/ca/signca/openssl.cnf \
                                        -key ${SF_ETCDIR}/pki/ca/signca/private/signca.key.pem \
                                        -new -sha256 \
                                        -out ${SF_ETCDIR}/pki/ca/signca/csr/signca.csr.pem \
                                        -subj "$SUBJ" || sfFail 198

                            openssl ca -batch -config ${SF_ETCDIR}/pki/ca/rootca/openssl.cnf -extensions v3_signca_ca \
                                       -days 3650 -notext -md sha256 \
                                       -in ${SF_ETCDIR}/pki/ca/signca/csr/signca.csr.pem \
                                       -out ${SF_ETCDIR}/pki/ca/signca/certs/signca.cert.pem || sfFail 199
                            chmod 444 ${SF_ETCDIR}/pki/ca/signca/certs/signca.cert.pem
                            sfExit

                    chainca:
                        targets:
                            hosts: yes
                            masters: one
                        run: |
                            cat ${SF_ETCDIR}/pki/ca/signca/certs/signca.cert.pem \
                                ${SF_ETCDIR}/pki/ca/rootca/certs/rootca.cert.pem >${SF_ETCDIR}/pki/ca/signca/certs/ca-chain.cert.pem
                            chmod 444 ${SF_ETCDIR}/pki/ca/signca/certs/ca-chain.cert.pem

                            {{ if .ClusterFlavor }}
                            tar zcvf ${SF_TMPDIR}/safescale-signca.tar.gz ${SF_ETCDIR}/pki/ca/signca && \
                            sfDropzonePush ${SF_TMPDIR}/safescale-signca.tar.gz && rm -f ${SF_TMPDIR}/safescale-signca.tar.gz || sfFail 200

                            sfDropzoneSync {{ .PrimaryGatewayIP }}
                            {{ if .SecondaryGatewayIP }} sfDropzoneSync {{ .SecondaryGatewayIP }} {{ end }}
                            for i in {{ range .ClusterNodeIPs }}{{ . }} {{ end }}; do
                                sfDropzoneSync $i
                            done

                            tar zcvf ${SF_TMPDIR}/safescale-rootca.tar.gz ${SF_ETCDIR}/pki/ca/rootca && \
                            sfDropzonePush ${SF_TMPDIR}/safescale-rootca.tar.gz && rm -f ${SF_TMPDIR}/safescale-rootca.tar.gz || sfFail 201
                            for i in {{ range .ClusterMasterIPs }}{{ . }} {{ end }}; do
                                sfDropzoneSync $i
                            done
                            {{ end }}
                            sfExit

                    spread-on-masters:
                        targets:
                            hosts: no
                            gateways: no
                            masters: all
                            nodes: no
                        run: |
                            # Recover rootca and chain-ca from Dropzone
                            sfDropzonePop ${SF_TMPDIR}
                            sfDropzoneClean
                            tar zxvf ${SF_TMPDIR}/safescale-rootca.tar.gz -C / && rm -f ${SF_TMPDIR}/safescale-rootca.tar.gz || sfFail 201
                            tar zxvf ${SF_TMPDIR}/safescale-signca.tar.gz -C / && rm -f ${SF_TMPDIR}/safescale-signca.tar.gz || sfFail 202
                            sfExit

                    spread-on-others:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: no
                            nodes: all
                        run: |
                            {{ if .ClusterFlavor }}
                            # Recover chain-ca from Dropzone
                            sfDropzonePop ${SF_TMPDIR}
                            sfDropzoneClean
                            tar zxvf ${SF_TMPDIR}/safescale-signca.tar.gz -C / && rm -f ${SF_TMPDIR}/safescale-signca.tar.gz || sfFail 203
                            {{ end }}

                    register:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: no
                            nodes: all
                        run: |
                            {{ if .ClusterFlavor }}
                            CANAME="{{ .ClusterName }}-CA.crt"
                            {{ else }}
                            CANAME="{{ .Hostname }}-CA.crt"
                            {{ end }}
                            # Add the new CA in system CAs
                            case $(sfGetFact "linux_kind") in
                                debian|ubuntu)
                                    ln -s ${SF_ETCDIR}/pki/ca/signca/certs/ca-chain.cert.pem /usr/local/share/ca-certificates/$CANAME
                                    update-ca-certificates || sfFail 204
                                    ;;
                                redhat|centos)
                                    if [ $(sfGetFact "linux_version") = 6 ]; then
                                        TARGET=/usr/local/share/ca-certificates
                                    else
                                        TARGET=/etc/pki/ca-trust/source/anchors
                                    fi
                                    ln -s ${SF_ETCDIR}/pki/ca/signca/certs/ca-chain.cert.pem "$TARGET/$CANAME"
                                    /bin/update-ca-trust || sfFail 205
                                    ;;
                                *)
                                    sfFail 206 "'spread' step not implemented for ($sfGetFact "linux_kind")"
                                    ;;
                            esac

                            sfExit

            remove:
                pace: clean
                steps:
                    clean:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: all
                            nodes: all
                        run: |
                            rm -f ${SF_ETCDIR}/pki/ca
                            sfExit

...
