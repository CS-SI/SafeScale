# Copyright 2018-2020, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
feature:
    suitableFor:
        cluster: k8s

    requirements:
        features:
            - kubernetes

    parameters:
        - ChartVersion=1.4.0
        - PersistentVolumeSize="8Gi"
        - Namespace=default
        - HelmRepoName=stable
        #- DockerRegistryURL=90.84.245.22:30002/cs/monitoring
        - DockerRegistryURL=hub.docker.com
        - DockerRegistryUsername=
        - DockerRegistryPassword=

    install:
        bash:
            check:
                pace: helm
                steps:
                    list_helm:
                        targets:
                            masters: any
                        run: |
                            sfHelm ls | grep postgres-infra | fFail 192
                            sfExit

        add:
            pace: config,install,ready
            steps:
                config:
                    targets:
                        masters: all
                    run: |
                        mkdir -p ${SF_ETCDIR}/k8s.postgres

                        cat >${SF_ETCDIR}/k8s.postgres.values.yaml <<-EOF
                        master:
                          affinity:
                            nodeAffinity:
                              requiredDuringSchedulingIgnoredDuringExecution:
                                nodeSelectorTerms:
                                - matchExpressions:
                                  - key: "node-role.kubernetes.io/worker"
                                    operator: In
                                    values:
                                    - infra
                            podAntiAffinity:
                              requiredDuringSchedulingIgnoredDuringExecution:
                              - labelSelector:
                                  matchExpressions:
                                  - key: role
                                    operator: In
                                    values:
                                    - master
                                  - key: release
                                    operator: In
                                    values:
                                    - postgresql-infra
                                topologyKey: "kubernetes.io/hostname"
                        slave:
                          affinity:
                            nodeAffinity:
                              requiredDuringSchedulingIgnoredDuringExecution:
                                nodeSelectorTerms:
                                - matchExpressions:
                                  - key: "node-role.kubernetes.io/worker"
                                    operator: In
                                    values:
                                    - infra
                            podAntiAffinity:
                              requiredDuringSchedulingIgnoredDuringExecution:
                              - labelSelector:
                                  matchExpressions:
                                  - key: role
                                    operator: In
                                    values:
                                    - slave
                                  - key: release
                                    operator: In
                                    values:
                                    - postgresql-infra
                                topologyKey: "kubernetes.io/hostname"
                        pgpool:
                          affinity:
                            nodeAffinity:
                              requiredDuringSchedulingIgnoredDuringExecution:
                                nodeSelectorTerms:
                                - matchExpressions:
                                  - key: "node-role.kubernetes.io/worker"
                                    operator: In
                                    values:
                                    - infra
                            podAntiAffinity:
                              requiredDuringSchedulingIgnoredDuringExecution:
                              - labelSelector:
                                  matchExpressions:
                                  - key: role
                                    operator: In
                                    values:
                                    - pgpool
                                  - key: release
                                    operator: In
                                    values:
                                    - postgresql-infra
                                topologyKey: "kubernetes.io/hostname"
                        EOF
                        sfExit

                install:
                    targets:
                        masters: any
                    run: |
                        #Install PostgreSQL Helm chart for Harbor
                        sfHelm install {{ .HelmRepoName }}/stolon \
                            --name postgres-infra \
                            --clusterName postgres-infra
                            --namespace {{ .Namespace }} \
                            --version {{ .ChartVersion }} \
                            # --tls \
                            # --set imagePullSecrets="my-docker-registry-credentials" \
                            # --set image.registry="{{ .DockerRegistryURL }}" \
                            # --set image.tag=${IMAGE_TAG_POSTGRES} \
                            --set persistence.enabled="true" \
                            --set persistence.size={{ .PersistentVolumeSize }} \
                            # --set postgresqlDatabase="registry" \
                            # --set volumePermissions.image.registry="{ .DockerRegistryURL }}/tools" \
                            --set replication.enabled=true \
                            --set replication.synchronousCommit="on" \
                            --set replication.slaveReplicas=2 \
                            --set replication.numSynchronousReplicas=2 \
                            --set store.backend="kubernetes" \
                            --set pgpool.replicas=2 \
                            --set pgpool.image.repository="{{ .DockerRegistryURL }}/tools/postgresql/pgpool" \
                            --set keeper.replicaCount=2 \
                            --set proxy.replicaCount=3 \
                            --set sentinel.replicaCount=2 \
                            # --set metrics.image.registry="{{ .DockerRegistryURL }}/prometheus-exporter" \
                            --values ${SF_ETCDIR}/k8s.postgres.values.yaml \
                            || sfFail 192

                        sfExit

                ready:
                    targets:
                        masters: any
                    run: |
                        sfRetry 5m 5 sfKubectl wait -n {{ .Namespace }} --timeout=5s --for condition=ready pods -l release=postgresql-infra || sfFail 193
                        sfExit

        remove:
            pace: helm,cleanup
            steps:
                helm:
                    targets:
                        masters: any
                    run: |
                        sfHelm delete postgresql-infra || sfFail 192
                        sfExit

                cleanup:
                    targets:
                        masters: all
                    run: |
                        rm -rf ${SF_ETCDIR}/k8s.postgres
                        sfExit

...