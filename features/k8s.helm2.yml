# Copyright 2018-2019, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
feature:
    suitableFor:
        host: no
        cluster: K8S,DCOS

    requirements:
        features:
            - kubernetes

    parameters:
        - Version=2.14.1
        - Namespace=default

    install:
        bash:
            check:
                pace: binaries
                steps:
                    binaries:
                        targets:
                            masters: all
                        run: |
                            ls /usr/local/sbin/helm &>/dev/null || sfFail 192
                            sfExit

            add:
                pace: certs,binaries,account,rbac-files,apply-rbac,init,synchro
                steps:
                    certs:
                        targets:
                            masters: one
                        run: |
                            mkdir -p ${SF_ETCDIR}/helm/pki ${SF_ETCDIR}/helm/ca

                            ## Generate Certificate Authority
                            openssl genrsa -out ca.key.pem 4096
                            openssl req -key ca.key.pem -new -x509 \
                                -days 10000 -sha256 -out ca.cert.pem \
                                -extensions v3_ca -subj "/C=FR/ST=Toulouse/L=Toulouse/O=CSSI/OU=Space/CN={{ .Hostname }}"

                            ## Generate keys
                            openssl genrsa -out tiller.key.pem 4096
                            openssl genrsa -out helm.key.pem 4096

                            ## Create a config file for generating a Certificate Signing Request (CSR)
                            cat > csr.conf <<-EOF
                            [ req ]
                            default_bits = 2048
                            prompt = no
                            default_md = sha256
                            req_extensions = req_ext
                            distinguished_name = dn

                            [ dn ]
                            C=FR
                            ST=FR
                            L=Toulouse
                            O=CSSI
                            OU=Space
                            CN={{ .Hostname }}

                            [ req_ext ]
                            subjectAltName = @alt_names

                            [ alt_names ]
                            DNS.1 = helm
                            DNS.2 = helm.{{ .Namespace }}
                            DNS.3 = helm.{{ .Namespace }}.svc
                            DNS.4 = helm.{{ .Namespace }}.svc.cluster
                            DNS.5 = helm.{{ .Namespace }}.svc.cluster.local
                            DNS.6 = helm.{{ .Namespace }}.svc.cluster.local.com
                            IP = {{ .HostIP }}

                            [ v3_ext ]
                            authorityKeyIdentifier=keyid,issuer:always
                            basicConstraints=CA:FALSE
                            keyUsage=keyEncipherment,dataEncipherment
                            extendedKeyUsage=serverAuth,clientAuth
                            subjectAltName=@alt_names
                            EOF

                            ## Generate the certificates signing request based on the config file
                            openssl req -new -key tiller.key.pem -out tiller.csr.pem -config csr.conf
                            openssl req -new -key helm.key.pem -out helm.csr.pem -config csr.conf

                            ## Generate certificates using the ca.key.pem, ca.crt.pem and xxxx.csr.pem
                            openssl x509 -req -CA ca.cert.pem -CAkey ca.key.pem -CAcreateserial -in tiller.csr.pem -out tiller.cert.pem -days 365 -extfile csr.conf

                            #openssl x509 -req -in helm.csr.pem -CA ca.cert.pem -CAkey ca.key.pem \
                            openssl x509 -req -CA ca.cert.pem -CAkey ca.key.pem -CAcreateserial -in helm.csr.pem -out helm.cert.pem  -days 365 -extfile csr.conf

                            ## Backup certificate and private key
                            mkdir -p ${SF_ETCDIR}/helm/pki
                            mv ca.cert.pem ca.key.pem ${SF_ETCDIR}/helm/ca
                            mv helm.cert.pem helm.key.pem ${SF_ETCDIR}/helm/pki
                            mv tiller.cert.pem tiller.key.pem ${SF_ETCDIR}/helm/pki

                            chown -R root:{{ .ClusterAdminUsername }} ${SF_ETCDIR}/helm
                            chmod -R u+rwx,g+r-wx,o-rwx ${SF_ETCDIR}/helm
                            find ${SF_ETCDIR}/helm -exec chmod ug+x {} \;

                            ## Clean directory
                            rm ca.srl csr.conf helm.csr.pem tiller.csr.pem
                            sfExit

                    binaries:
                        targets:
                            masters: all
                        run: |
                            cd ${SF_TMPDIR}
                            wget https://get.helm.sh/helm-v{{.Version}}-linux-amd64.tar.gz || sfFail 192

                            tar -zxvf ${SF_TMPDIR}/helm-v{{.Version}}-linux-amd64.tar.gz -C ${SF_TMPDIR} || sfFail 193

                            chmod a+rx ${SF_TMPDIR}/linux-amd64/helm \
                              && chmod a+rx ${SF_TMPDIR}/linux-amd64/tiller || sfFail 194

                            mv ${SF_TMPDIR}/linux-amd64/helm /usr/local/sbin \
                              && mv ${SF_TMPDIR}/linux-amd64/tiller /usr/local/sbin || sfFail 195

                            rm -drf ${SF_TMPDIR}/linux-amd64 \
                              && rm -rf ${SF_TMPDIR}/helm-v{{.Version}}-linux-amd64.tar.gz || sfFail 196

                            sfExit

                    account:
                        targets:
                            masters: one
                        run: |
                            ## Create serviceaccount
                            sfKubectl create serviceaccount tiller -n kube-system || sfFail 197
                            sfExit

                    rbac-files:
                        targets:
                            masters: all
                        run: |
                            cat > ${SF_ETCDIR}/helm/tiller-clusterrolebinding-admin.yaml <<EOF
                            apiVersion: rbac.authorization.k8s.io/v1
                            kind: ClusterRoleBinding
                            metadata:
                                name: tiller-clusterrolebinding-admin
                            roleRef:
                                apiGroup: rbac.authorization.k8s.io
                                kind: ClusterRole
                                name: cluster-admin
                            subjects:
                                - kind: ServiceAccount
                                  name: tiller
                                  namespace: kube-system
                            EOF

                            cat > ${SF_ETCDIR}/helm/tiller-role-{{.Namespace}}.yaml <<EOF
                            kind: Role
                            apiVersion: rbac.authorization.k8s.io/v1
                            metadata:
                                name: tiller-role-{{ .Namespace }}
                                namespace: {{ .Namespace }}
                            rules:
                                - apiGroups: ["", "batch", "extensions", "apps"]
                                  resources: ["*"]
                                  verbs: ["*"]
                            EOF

                            cat > ${SF_ETCDIR}/helm/tiller-rolebinding-{{.Namespace}}.yaml <<EOF
                            kind: RoleBinding
                            apiVersion: rbac.authorization.k8s.io/v1
                            metadata:
                                name: tiller-rolebinding
                                namespace: {{.Namespace}}
                            subjects:
                                - kind: ServiceAccount
                                  name: tiller
                                  namespace: kube-system
                            roleRef:
                                kind: Role
                                name: tiller-role-{{.Namespace}}
                                apiGroup: rbac.authorization.k8s.io
                            EOF

                            cat > ${SF_ETCDIR}/helm/tiller-role-system.yaml <<EOF
                            kind: Role
                            apiVersion: rbac.authorization.k8s.io/v1
                            metadata:
                                name: tiller-role-system
                                namespace: kube-system
                            rules:
                                - apiGroups: ["", "extensions", "apps"]
                                  resources: ["configmaps"]
                                  verbs: ["*"]
                            EOF

                            cat > ${SF_ETCDIR}/helm/tiller-rolebinding-system.yaml <<EOF
                            kind: RoleBinding
                            apiVersion: rbac.authorization.k8s.io/v1
                            metadata:
                                name: tiller-rolebinding-system
                                namespace: kube-system
                            subjects:
                                - kind: ServiceAccount
                                  name: tiller
                                  namespace: kube-system
                            roleRef:
                                kind: Role
                                name: tiller-role-system
                                apiGroup: rbac.authorization.k8s.io
                            EOF

                            cat > ${SF_ETCDIR}/helm/tiller-role-secret.yaml <<EOF
                            kind: Role
                            apiVersion: rbac.authorization.k8s.io/v1
                            metadata:
                                name: tiller-role-secret
                                namespace: kube-system
                            rules:
                                - apiGroups: [""]
                                  resources: ["secrets"]
                                  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
                            EOF

                            cat > ${SF_ETCDIR}/helm/tiller-rolebinding-secret.yaml <<EOF
                            kind: RoleBinding
                            apiVersion: rbac.authorization.k8s.io/v1
                            metadata:
                                name: tiller-rolebinding-secret
                                namespace: kube-system
                            subjects:
                                - kind: ServiceAccount
                                  name: tiller
                                  namespace: kube-system
                            roleRef:
                                kind: Role
                                name: tiller-role-secret
                                apiGroup: rbac.authorization.k8s.io
                            EOF

                    apply-rbac:
                        targets:
                            masters: one
                        run: |
                            ## Apply RBAC policy
                            sfKubectl apply -f ${SF_ETCDIR}/helm/tiller-clusterrolebinding-admin.yaml || sfFail 198
                            sfKubectl apply -f ${SF_ETCDIR}/helm/tiller-role-{{.Namespace}}.yaml || sfFail 199
                            sfKubectl apply -f ${SF_ETCDIR}/helm/tiller-rolebinding-{{.Namespace}}.yaml || sfFail 200
                            sfKubectl apply -f ${SF_ETCDIR}/helm/tiller-role-system.yaml || sfFail 201
                            sfKubectl apply -f ${SF_ETCDIR}/helm/tiller-rolebinding-system.yaml || sfFail 202
                            sfKubectl apply -f ${SF_ETCDIR}/helm/tiller-role-secret.yaml || sfFail 203
                            sfKubectl apply -f ${SF_ETCDIR}/helm/tiller-rolebinding-secret.yaml || sfFail 204
                            sfExit

                    init:
                        targets:
                            masters: one
                        run: |
                            ## Install Helm as {{ .ClusterAdminUsername }} (the user that runs kubectl) client with TLS authentication with Tiller
                            sudo -u cladm -i helm init \
                                --tiller-tls \
                                --tiller-tls-hostname {{ .Hostname }} \
                                --tiller-tls-cert ${SF_ETCDIR}/helm/pki/tiller.cert.pem \
                                --tiller-tls-key ${SF_ETCDIR}/helm/pki/tiller.key.pem \
                                --tiller-tls-verify \
                                --tls-ca-cert ${SF_ETCDIR}/helm/ca/ca.cert.pem \
                                --service-account tiller \
                                --override 'spec.template.spec.containers[0].command'='{/tiller,--storage=secret}' \
                                || sfFail 205

                            mkdir -p /home/{{.ClusterAdminUsername}}/.helm
                            cp ${SF_ETCDIR}/helm/ca/ca.cert.pem /home/{{ .ClusterAdminUsername }}/.helm/ca.pem
                            cp ${SF_ETCDIR}/helm/pki/helm.cert.pem /home/{{ .ClusterAdminUsername }}/.helm/cert.pem
                            cp ${SF_ETCDIR}/helm/pki/helm.key.pem /home/{{ .ClusterAdminUsername }}/.helm/key.pem

                            chown -R {{ .ClusterAdminUsername }}:{{ .ClusterAdminUsername }} /home/{{ .ClusterAdminUsername }}/.helm
                            chmod -R 0770 /home/{{ .ClusterAdminUsername }}/.helm

                            # Push .helm configuration to all the other masters
                            # Creates an archive of the .helm directory
                            cd /home/{{ .ClusterAdminUsername }} && \
                            tar -zcvf ${SF_TMPDIR}/helm_config.tar.gz .helm || sfFail 206

                            # Push the archive in the dropzone and synchronize
                            sfDropzonePush ${SF_TMPDIR}/helm_config.tar.gz || sfFail 207
                            for ip in {{ range .MasterIPs }}{{ . }} {{ end }}; do
                                sfDropzoneSync $ip || sfFail 208
                            done
                            rm -f ${SF_TMPDIR}/helm_config.tar.gz
                            sfExit

                    synchro:
                        targets:
                            masters: all
                        run: |
                            sfDropzonePop ${SF_TMPDIR} || sfFail 192
                            sfDropzoneClean

                            [ -f ${SF_TMPDIR}/helm_config.tar.gz ] || sfFail 193
                            tar -zxvf ${SF_TMPDIR}/helm_config.tar.gz -C /home/{{ .ClusterAdminUsername }} || sfFail 194

                            sfExit

            remove:
                pace: namespace,cleanup
                steps:
                    namespace:
                        targets:
                            masters: one
                        run: |
                            ## Delete deployment
                            if sfKubectl -n kube-system get deployment tiller-deploy &>/dev/null; then
                                sfKubectl -n kube-system delete deployment tiller-deploy || sfFail 192
                            fi
                            ## Delete account
                            if sfKubectl get serviceaccount tiller -n kube-system &>/dev/null; then
                                sfKubectl delete serviceaccount tiller -n kube-system || sfFail 193
                            fi
                            ## Delete RBAC policy
                            if sfKubectl get role tiller-rolebinding-secret -n kube-system &>/dev/null; then
                                sfKubectl delete -f ${SF_ETCDIR}/helm/tiller-clusterrolebinding-admin.yaml || sfFail 194
                                sfKubectl delete -f ${SF_ETCDIR}/helm/tiller-role-{{ .Namespace }}.yaml || sfFail 195
                                sfKubectl delete -f ${SF_ETCDIR}/helm/tiller-rolebinding-{{.Namespace}}.yaml || sfFail 196
                                sfKubectl delete -f ${SF_ETCDIR}/helm/tiller-role-system.yaml || sfFail 197
                                sfKubectl delete -f ${SF_ETCDIR}/helm/tiller-rolebinding-system.yaml || sfFail 198
                                sfKubectl delete -f ${SF_ETCDIR}/helm/tiller-role-secret.yaml || sfFail 199
                                sfKubectl delete -f ${SF_ETCDIR}/helm/tiller-rolebinding-secret.yaml || sfFail 200
                            fi
                            sfExit

                    cleanup:
                        targets:
                            masters: all
                        run: |
                            rm -f /usr/local/sbin/helm || sfFail 201
                            rm -f /usr/local/sbin/tiller || sfFail 202
                            rm -drf ${SF_ETCDIR}/helm /home/{{ .ClusterAdminUsername }}/.helm || sfFail 203
                            sfExit

...