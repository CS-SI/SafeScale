#
# Copyright 2018-2019, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
feature:
    suitableFor:
        host: yes
        cluster: all
    install:
        bash:
            check:
                pace: pkg
                steps:
                    pkg:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: all
                            nodes: all
                        run: |
                            case $LINUX_KIND in
                                debian|ubuntu)
                                    dpkg -l | grep docker-ce &>/dev/null
                                    ;;
                                centos|rhel)
                                    rpm -qa | grep docker-ce &>/dev/null
                                    ;;
                                *)
                                    echo "Unsupported operating system '$LINUX_KIND'"
                                    exit 1
                                    ;;
                            esac

            add:
                pace: docker-ce,config,firewall,ready
                steps:
                    docker-ce:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: all
                            nodes: all
                        run: |
                            case $LINUX_KIND in
                                debian|ubuntu)
                                    export DEBIAN_FRONTEND=noninteractive
                                    sfRetry 5m 3 "sfApt update"
                                    sfRetry 5m 3 "sfApt install -y gnupg2 || sfApt install -y gnupg"
                                    sfRetry 5m 3 "sfApt install -y apt-transport-https ca-certificates curl software-properties-common" || exit 192
                                    sfRetry 5m 3 "curl -fsSL https://download.docker.com/linux/$LINUX_KIND/gpg | apt-key add -" || exit 193
                                    # Currently, no stable release of docker-ce for Ubuntu 19.04
                                    if dpkg --compare-versions $(sfGetFact "linux version") gt 18.10; then
                                        echo "deb [arch=amd64] https://download.docker.com/linux/$LINUX_KIND $(lsb_release -cs) test" >/etc/apt/sources.list.d/docker.list
                                    else
                                        echo "deb [arch=amd64] https://download.docker.com/linux/$LINUX_KIND $(lsb_release -cs) stable" >/etc/apt/sources.list.d/docker.list
                                    fi
                                    sfRetry 5m 3 "sfApt update"
                                    sfRetry 5m 3 "sfApt install -qqy docker-ce" || exit 194
                                    ;;
                                centos|rhel)
                                    yum install -y yum-utils device-mapper-persistent-data lvm2 || exit 192
                                    yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo || exit 193
                                    yum install -y docker-ce || exit 194
                                    ;;
                                *)
                                    echo "Unsupported operating system '$LINUX_KIND'"
                                    exit 195
                                    ;;
                            esac
                            exit 0

                    config:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: all
                            nodes: all
                        run: |
                            mkdir -p /etc/docker
                            # if [ "$(sfGetFact 'use systemd')" = "1" ]; then
                            #     DRIVER=systemd
                            # else
                                DRIVER=cgroupfs
                            # fi
                            if [ "$(sfGetFact 'redhat like')" = "1" ]; then
                                cat > /etc/docker/daemon.json <<-EOF
                            {
                                "iptables": false,
                                "exec-opts": ["native.cgroupdriver=${DRIVER}"],
                                "log-driver": "json-file",
                                "log-opts": {
                                    "max-size": "100m"
                                },
                                "storage-driver": "overlay2",
                                "storage-opts": [
                                    "overlay2.override_kernel_check=true"
                                ]
                            }
                            EOF
                            else
                                cat > /etc/docker/daemon.json <<-EOF
                            {
                                "iptables": false,
                                "exec-opts": ["native.cgroupdriver=${DRIVER}"],
                                "log-driver": "json-file",
                                "log-opts": {
                                    "max-size": "100m"
                                },
                                "storage-driver": "overlay2"
                            }
                            EOF
                            fi
                            exit 0

                    firewall:
                        targets:
                            gateways: all
                            hosts: yes
                            masters: all
                            nodes: all
                        run: |
                            # Makes sure firewalld is running, starting first its dependency dbus...
                            sfService start dbus
                            # then firewalld  itself
                            sfService restart firewalld
                            sfFirewallAdd --zone=trusted --add-interface=docker0
                            sfFirewallAdd --zone=trusted --add-service docker-swarm
                            sfFirewallReload

                    ready:
                        targets:
                            gateways: all
                            hosts: yes
                            masters: all
                            nodes: all
                        run: |
                            sfService enable docker || exit 195
                            sfService restart docker || exit 196
                            sfRetry 5m 5 sfService status docker &>/dev/null
                            [ $? -ne 0 ] && exit 197
                            exit 0

            remove:
                pace: docker-ce
                steps:
                    docker-ce:
                        targets:
                            gateways: all
                            hosts: yes
                            masters: all
                            nodes: all
                        run: |
                            sfService disable docker
                            sfService stop docker
                            case $LINUX_KIND in
                                debian|ubuntu)
                                    sfWaitForApt && apt-get purge -y docker-ce*
                                    ;;
                                centos|rhel)
                                    yum remove -y docker-ce*
                                    ;;
                                *)
                                    echo "Unsupported operating system '$LINUX_KIND'"
                                    exit 1
                                    ;;
                            esac

...