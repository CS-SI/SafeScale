#
# Copyright 2018-2019, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
feature:
    suitableFor:
        host: yes
        cluster: all
    requirements:
        features:
            - docker
            - docker-compose

    install:
        bash:
            check:
                pace: curl
                steps:
                    curl:
                        targets:
                            gateways: all
                            hosts: no
                            masters: no
                            nodes: no
                        run: |
                            curl -Ssl -I -k https://localhost:8444/ 2>&1 | grep "HTTP/1.1 200 OK" &>/dev/null

            add:
                pace: compose,firewall
                steps:
                    compose:
                        timeout: 10
                        targets:
                            gateways: all
                            hosts: no
                            masters: no
                            nodes: no
                        run: |
                            mkdir -p ${SF_VARDIR}/kong/postgresql ${SF_ETCDIR}/kong/includes

                            cat >${SF_ETCDIR}/kong/Dockerfile <<-'EOF'
                            FROM kong:1.1
                            RUN apk update && apk add git unzip
                            RUN luarocks install kong-oidc \
                             && luarocks install kong-prometheus-plugin
                            RUN mkdir -p /etc/kong/includes
                            RUN setcap CAP_NET_BIND_SERVICE=+ep /usr/local/openresty/nginx/sbin/nginx
                            EOF

                            {{ if .ClusterFlavor }}
                            TAG=kong4safescale
                            {{ else }}
                            TAG=kong
                            {{ end }}
                            docker build -t $TAG ${SF_ETCDIR}/kong 

                            cat >${SF_ETCDIR}/kong/konga.userdb.data <<-EOF
                            module.exports = [
                                {
                                    "username": "cladm",
                                    "email": "cladm@safescale",
                                    "firstName": "Cluster",
                                    "lastName": "Administrator",
                                    "node_id": "https://127.0.0.1:8444",
                                    "admin": true,
                                    "active" : true,
                                    "password": "{{.Password}}"
                                }
                            ]
                            EOF
                            chmod go-rwx ${SF_ETCDIR}/kong/konga.userdb.data

                            DB_PASSWORD=$(sfRandomString 16 "[:alnum:]")

                            {{ if .ClusterFlavor }}
                            IMAGE=kong4safescale
                            KONG_BRIDGE=br_kong4s
                            {{ else }}
                            IMAGE=kong
                            KONG_BRIDGE=br_kong
                            {{ end}}
                            KONG_PUB_NET="${IMAGE}_pubnet"

                            cat >${SF_ETCDIR}/kong/docker-compose.yml <<-EOF
                            version: '2.1'
                            services:
                                db:
                                    image: postgres:9
                                    environment:
                                        - POSTGRES_DB=kong
                                        - POSTGRES_USER=kong
                                        - POSTGRES_PASSWORD="${DB_PASSWORD}"
                                    volumes:
                                        - ${SF_VARDIR}/kong/postgresql:/var/lib/postgresql/data
                                    networks:
                                        dbnet:
                                    restart: always
                                    healthcheck:
                                        test: ["CMD", "pg_isready", "-U", "kong"]
                                        interval: 10s
                                        timeout: 5s
                                        retries: 5

                                migration:
                                    image: kong:1.1
                                    environment:
                                        - KONG_DATABASE=postgres
                                        - KONG_PG_HOST=db
                                        - KONG_PG_USER=kong
                                        - KONG_PG_PASSWORD="${DB_PASSWORD}"
                                    command: kong migrations bootstrap # up
                                    networks:
                                        dbnet:
                                    depends_on:
                                        db:
                                            condition: service_healthy

                                proxy:
                                    image: ${IMAGE}
                                    environment:
                                        - KONG_DATABASE=postgres
                                        - KONG_PG_HOST=db
                                        - KONG_PG_DATABASE=kong
                                        - KONG_PG_USER=kong
                                        - KONG_PG_PASSWORD="${DB_PASSWORD}"
                                        - KONG_PROXY_ACCESS_LOG=/dev/stdout
                                        - KONG_ADMIN_ACCESS_LOG=/dev/stdout
                                        - KONG_PROXY_ERROR_LOG=/dev/stderr
                                        - KONG_ADMIN_ERROR_LOG=/dev/stderr
                                        - KONG_ADMIN_LISTEN=0.0.0.0:8444 ssl
                                        - KONG_PROXY_LISTEN=0.0.0.0:443 ssl
                                        - KONG_PLUGINS=oidc,prometheus
                                    volumes:
                                        - ${SF_ETCDIR}/kong/kong.conf:/etc/kong/kong.conf:ro
                                        - ${SF_ETCDIR}/kong/includes:/etc/kong/includes:ro
                                    networks:
                                        ${KONG_PUB_NET}:
                                        dbnet:
                                        #svc_net:
                                    ports:
                                        - "443:443"
                                        - "127.0.0.1:8444:8444"
                                        - "{{.GatewayIP}}:6443:6443"
                                    depends_on:
                                        db:
                                            condition: service_healthy
                                        migration:
                                            condition: service_started
                                    restart: always
                                    healthcheck:
                                        test: ["CMD-SHELL", "curl -I -s -k -L https://127.0.0.1:8444 || exit 1"]
                                        interval: 5s
                                        retries: 10

                                gui:
                                    image: pantsel/konga
                                    volumes:
                                        - ${SF_ETCDIR}/kong/konga.userdb.data:/usr/local/etc/userdb.data:ro
                                    environment:
                                        - TOKEN_SECRET="$(sfRandomString 32 [:alnum:])"
                                        - DB_ADAPTER=postgres
                                        - DB_DATABASE=kong-gui
                                        - DB_USER=kong
                                        - DB_PASSWORD="${DB_PASSWORD}"
                                        - NODE_ENV=production
                                        - KONGA_SEED_USER_DATA_SOURCE_FILE=/usr/local/etc/userdb.data
                                    networks:
                                        ${KONG_PUB_NET}:
                                        dbnet:
                                    ports:
                                        - "{{.HostIP}}:1337:1337"
                                    restart: always
                                    depends_on:
                                        db:
                                            condition: service_healthy
                                        proxy:
                                            condition: service_started

                            networks:
                                ${KONG_PUB_NET}:
                                    external: true
                                dbnet:
                                    name: "${IMAGE}_dbnet"
                                    internal: true
                                # svc_net:
                                #     name: "${NET_PREFIX}_svc_net"
                                #     internal: true
                            EOF
                            chmod go-rwx ${SF_ETCDIR}/kong/docker-compose.yml

                            cat >${SF_ETCDIR}/kong/kong.conf <<-EOF
                            stream_listen = 0.0.0.0:6442
                            nginx_stream_include = /etc/kong/includes/*.conf
                            anonymous_reports = off
                            EOF

                            {{ if .ClusterFlavor }}
                            OPTIONS="-p ${IMAGE}"
                            {{ else }}
                            OPTIONS=
                            {{ end }}
                            docker network create --driver bridge --opt "com.docker.network.bridge.name=${KONG_BRIDGE}" ${KONG_PUB_NET}
                            docker-compose -f ${SF_ETCDIR}/kong/docker-compose.yml $OPTIONS up -d
                            sfRetry 5m 5 "docker ps --all | grep ${IMAGE}_migration_1 | grep Exited" || exit 
                            exit 0

                    firewall:
                        targets:
                            hosts: yes
                        run: |
                            {{ if .ClusterFlavor }}
                            BRIDGE=br_kong4s
                            {{ else }}
                            BRIDGE=br_kong
                            {{ end}}
                            sfFirewallAdd --zone=trusted --add-interface=${BRIDGE} && \
                            sfFirewallAdd --zone=public --add-service=https && \
                            sfFirewallReload

            remove:
                pace: firewall,compose,network
                steps:
                    firewall:
                        targets:
                            hosts: yes
                        run: |
                            {{ if .ClusterFlavor }}
                            BRIDGE=br_kong4s
                            {{ else }}
                            BRIDGE=br_kong
                            {{ end}}
                            sfFirewallAdd --zone=public --remove-service=https && \
                            sfFirewallAdd --zone=trusted --remove-interface=${BRIDGE} && \
                            sfFirewallReload

                    compose:
                        targets:
                            hosts: yes
                        run: |
                            {{ if .ClusterFlavor }}
                            OPTIONS="-p long4safescale"
                            NET_PREFIX=kong4safescale
                            {{ else }}
                            OPTIONS=
                            NET_PREFIX=kong
                            {{ end }}
                            docker-compose -f ${SF_ETCDIR}/kong/docker-compose.yml $OPTIONS rm --stop -v --force || exit 192
                            docker network rm ${NET_PREFIX}_external_net
                            rm -rf ${SF_ETCDIR}/kong/docker-compose.yml ${SF_VARDIR}/kong

                    network:
                        targets:
                            hosts: yes
                        run: |
                            {{ if .ClusterFlavor }}
                            NET_PREFIX=kong4safescale
                            {{ else }}
                            NET_PREFIX=kong
                            {{ end }}
                            docker network rm ${NET_PREFIX}_external_net

...