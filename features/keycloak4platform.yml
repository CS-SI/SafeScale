#
# Copyright 2018-2020, CS Systemes d'Information, http://csgroup.eu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
feature:
    suitableFor:
        cluster: swarm

    requirements:
        features:
            - postgresql4platform

    parameters:
        - KeycloakAdminPassword

    install:
        bash:
            check:
                pace: curl
                steps:
                    curl:
                        targets:
                            masters: all
                        run: |
                            curl -Ssl -I -k https://{{ .HostIP }}:63009/auth/ 2>&1 | grep "HTTP/2 200" &>/dev/null || sfFail 192
                            sfExit

            add:
                pace: config,image,secrets,stack,start
                steps:
                    config:
                        targets:
                            masters: all
                        run: |
                            mkdir -p ${SF_ETCDIR}/keycloak4platform/build

                            # patch for v7.0.1
                            cat >${SF_ETCDIR}/keycloak4platform/build/standalone-ha.xml.patch <<-'EOF'
                            --- standalone-ha.xml.orig      2019-10-24 20:24:36.500072568 +0000
                            +++ standalone-ha.xml   2019-10-24 20:26:23.097061527 +0000
                            @@ -56,6 +56,13 @@
                                                 <properties path="application-roles.properties" relative-to="jboss.server.config.dir"/>
                                             </authorization>
                                         </security-realm>
                            +            <security-realm name="KeycloakRealm">
                            +                <server-identities>
                            +                    <ssl>
                            +                        <keystore path="safescale.jks" relative-to="jboss.server.config.dir" keystore-password="safescale" />
                            +                    </ssl>
                            +                </server-identities>
                            +            </security-realm>
                                     </security-realms>
                                     <audit-log>
                                         <formatters>
                            @@ -134,17 +141,28 @@
                                                 </security>
                                             </datasource>
                                             <datasource jndi-name="java:jboss/datasources/KeycloakDS" pool-name="KeycloakDS" enabled="true" use-java-context="true" statistics-enabled="${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}">
                            -                    <connection-url>jdbc:h2:${jboss.server.data.dir}/keycloak;AUTO_SERVER=TRUE</connection-url>
                            -                    <driver>h2</driver>
                            +                    <connection-url>jdbc:postgresql://${env.DB_ADDR:postgres}:${env.DB_PORT:5432}/${env.DB_DATABASE:keycloak}${env.JDBC_PARAMS:}</connection-url>
                            +                    <driver>postgresql</driver>
                            +                    <pool>
                            +                        <flush-strategy>IdleConnections</flush-strategy>
                            +                    </pool>
                                                 <security>
                            -                        <user-name>sa</user-name>
                            -                        <password>sa</password>
                            +                        <user-name>${env.DB_USER:keycloak}</user-name>
                            +                        <password>${env.DB_PASSWORD:password}</password>
                                                 </security>
                            +                    <validation>
                            +                        <check-valid-connection-sql>SELECT 1</check-valid-connection-sql>
                            +                        <background-validation>true</background-validation>
                            +                        <background-validation-millis>60000</background-validation-millis>
                            +                    </validation>
                                             </datasource>
                                             <drivers>
                                                 <driver name="h2" module="com.h2database.h2">
                                                     <xa-datasource-class>org.h2.jdbcx.JdbcDataSource</xa-datasource-class>
                                                 </driver>
                            +                    <driver name="postgresql" module="org.postgresql.jdbc">
                            +                        <xa-datasource-class>org.postgresql.xa.PGXADataSource</xa-datasource-class>
                            +                    </driver>
                                             </drivers>
                                         </datasources>
                                     </subsystem>
                            @@ -609,10 +627,10 @@
                                         <server name="default-server">
                                             <ajp-listener name="ajp" socket-binding="ajp"/>
                                             <http-listener name="default" socket-binding="http" redirect-socket="https" proxy-address-forwarding="${env.PROXY_ADDRESS_FORWARDING:false}" enable-http2="true"/>
                            -                <https-listener name="https" socket-binding="https" proxy-address-forwarding="${env.PROXY_ADDRESS_FORWARDING:false}" security-realm="ApplicationRealm" enable-http2="true"/>
                            +                <https-listener name="https" socket-binding="https" proxy-address-forwarding="${env.PROXY_ADDRESS_FORWARDING:false}" security-realm="KeycloakRealm" enable-http2="true"/>
                                             <host name="default-host" alias="localhost">
                                                 <location name="/" handler="welcome-content"/>
                            -                    <http-invoker security-realm="ApplicationRealm"/>
                            +                    <http-invoker security-realm="KeycloakRealm"/>
                                             </host>
                                         </server>
                                         <servlet-container name="default">
                            @@ -635,6 +653,9 @@
                                     <interface name="private">
                                         <inet-address value="${jboss.bind.address.private:127.0.0.1}"/>
                                     </interface>
                            +        <interface name="eth0">
                            +            <nic name="eth0"/>
                            +        </interface>
                                 </interfaces>
                                 <socket-binding-group name="standard-sockets" default-interface="public" port-offset="${jboss.socket.binding.port-offset:0}">
                                     <socket-binding name="management-http" interface="management" port="${jboss.management.http.port:9990}"/>
                            @@ -643,15 +664,16 @@
                                     <socket-binding name="http" port="${jboss.http.port:8080}"/>
                                     <socket-binding name="https" port="${jboss.https.port:8443}"/>
                                     <socket-binding name="jgroups-mping" interface="private" multicast-address="${jboss.default.multicast.address:230.0.0.4}" multicast-port="45700"/>
                            -        <socket-binding name="jgroups-tcp" interface="private" port="7600"/>
                            -        <socket-binding name="jgroups-tcp-fd" interface="private" port="57600"/>
                            +        <socket-binding name="jgroups-tcp" interface="eth0" port="7600"/>
                            +        <socket-binding name="jgroups-tcp-fd" interface="eth0" port="57600"/>
                                     <socket-binding name="jgroups-udp" interface="private" port="55200" multicast-address="${jboss.default.multicast.address:230.0.0.4}" multicast-port="45688"/>
                                     <socket-binding name="jgroups-udp-fd" interface="private" port="54200"/>
                                     <socket-binding name="modcluster" multicast-address="${jboss.modcluster.multicast.address:224.0.1.105}" multicast-port="23364"/>
                                     <socket-binding name="txn-recovery-environment" port="4712"/>
                                     <socket-binding name="txn-status-manager" port="4713"/>
                            +        <socket-binding name="proxy-https" port="443"/>
                                     <outbound-socket-binding name="mail-smtp">
                                         <remote-destination host="localhost" port="25"/>
                                     </outbound-socket-binding>
                                 </socket-binding-group>
                            -</server>
                            \ No newline at end of file
                            +</server>
                            EOF
                            sfExit

                    image:
                        targets:
                            masters: all
                        run: |
                            cat >${SF_ETCDIR}/keycloak4platform/build/TCP_PING.cli <<-'EOF'
                            embed-server --server-config=standalone-ha.xml --std-out=echo
                            batch

                            /subsystem=infinispan/cache-container=keycloak/distributed-cache=sessions:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})
                            /subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})
                            /subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineSessions:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})
                            /subsystem=infinispan/cache-container=keycloak/distributed-cache=loginFailures:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})

                            /subsystem=jgroups/stack=udp:remove()

                            /subsystem=jgroups/stack=tcp/protocol=MPING:remove()
                            /subsystem=jgroups/stack=tcp/protocol=$keycloak_jgroups_discovery_protocol:add(add-index=0, properties=$keycloak_jgroups_discovery_protocol_properties)

                            /subsystem=jgroups/channel=ee:write-attribute(name=stack, value="tcp")

                            /subsystem=jgroups/stack=tcp/transport=TCP/property=external_addr/:add(value=${env.JGROUPS_DISCOVERY_EXTERNAL_IP:127.0.0.1})

                            run-batch
                            stop-embedded-server
                            EOF

                            cat >${SF_ETCDIR}/keycloak4platform/build/JDBC_PING.cli <<-'EOF'
                            embed-server --server-config=standalone-ha.xml --std-out=echo

                            batch

                            /subsystem=infinispan/cache-container=keycloak/distributed-cache=sessions:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})
                            /subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})
                            /subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineSessions:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})
                            /subsystem=infinispan/cache-container=keycloak/distributed-cache=loginFailures:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})

                            /subsystem=jgroups/stack=tcp:remove()
                            /subsystem=jgroups/stack=tcp:add()
                            /subsystem=jgroups/stack=tcp/transport=TCP:add(socket-binding="jgroups-tcp")
                            /subsystem=jgroups/stack=tcp/protocol=JDBC_PING:add()
                            /subsystem=jgroups/stack=tcp/protocol=JDBC_PING/property=datasource_jndi_name:add(value=java:jboss/datasources/KeycloakDS)

                            /subsystem=jgroups/stack=tcp/protocol=JDBC_PING/property=initialize_sql:add(value="CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, ping_data bytea DEFAULT NULL, added timestamp DEFAULT NOW(), PRIMARY KEY (own_addr, cluster_name))")

                            /subsystem=jgroups/stack=tcp/protocol=MERGE3:add()
                            /subsystem=jgroups/stack=tcp/protocol=FD_SOCK:add(socket-binding="jgroups-tcp-fd")
                            /subsystem=jgroups/stack=tcp/protocol=FD:add()
                            /subsystem=jgroups/stack=tcp/protocol=VERIFY_SUSPECT:add()
                            /subsystem=jgroups/stack=tcp/protocol=pbcast.NAKACK2:add()
                            /subsystem=jgroups/stack=tcp/protocol=UNICAST3:add()
                            /subsystem=jgroups/stack=tcp/protocol=pbcast.STABLE:add()
                            /subsystem=jgroups/stack=tcp/protocol=pbcast.GMS:add()
                            /subsystem=jgroups/stack=tcp/protocol=pbcast.GMS/property=max_join_attempts:add(value=5)
                            /subsystem=jgroups/stack=tcp/protocol=MFC:add()
                            /subsystem=jgroups/stack=tcp/protocol=FRAG3:add()

                            /subsystem=jgroups/stack=udp:remove()
                            /subsystem=jgroups/channel=ee:write-attribute(name=stack, value=tcp)
                            /socket-binding-group=standard-sockets/socket-binding=jgroups-mping:remove()

                            run-batch

                            try
                                :resolve-expression(expression=${env.JGROUPS_DISCOVERY_EXTERNAL_IP})
                                /subsystem=jgroups/stack=tcp/transport=TCP/property=external_addr/:add(value=${env.JGROUPS_DISCOVERY_EXTERNAL_IP})
                            catch
                                echo "JGROUPS_DISCOVERY_EXTERNAL_IP maybe not set."
                            end-try

                            stop-embedded-server
                            EOF

                            cat >${SF_ETCDIR}/keycloak4platform/build/my-docker-entrypoint.sh <<-'EOF'
                            #!/bin/bash

                            # Keycloak settings
                            {{ if ne .ClusterComplexity "small" }}
                            export CACHE_OWNERS_COUNT=2
                            export CACHE_OWNERS_AUTH_SESSIONS_COUNT=2
                            export JGROUPS_DISCOVERY_PROTOCOL=JDBC_PING
                            export JGROUPS_DISCOVERY_EXTERNAL_IP=$(hostname -s)
                            export JGROUPS_DISCOVERY_PROPERTIES=datasource_jndi_name=java:jboss/datasources/KeycloakDS
                            {{ end }}
                            export PROXY_ADDRESS_FORWARDING=true

                            export KEYCLOAK_USER=admin
                            export KEYCLOAK_PASSWORD=$(cat /run/secrets/password.admin)
                            export DB_ADDR={{ .DefaultRouteIP }}
                            export DB_PORT=63008
                            export DB_VENDOR=postgres
                            export DB_DATABASE=keycloak4platform
                            #FIXME: Using postgres user because for now keycloak4platform doesn't have enough rights to do the job
                            # export DB_USER=keycloak4platform
                            export DB_USER=postgres
                            export DB_PASSWORD=$(cat /run/secrets/password.postgres)

                            export ADMIN_DB_PASSWORD=$(cat /run/secrets/password.postgres)

                            exec /opt/jboss/tools/docker-entrypoint.sh -Djboss.tx.node.id={{ .Hostname }} $@
                            EOF

                            cat >${SF_ETCDIR}/keycloak4platform/build/Dockerfile <<-'EOF'
                            FROM jboss/keycloak:7.0.1

                            USER root

                            RUN microdnf update -y \
                            && microdnf install -y patch net-tools \
                            && microdnf clean all

                            WORKDIR /usr/local/bin
                            ADD https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 ./jq
                            RUN chmod a+rx jq

                            WORKDIR /opt/jboss

                            # Generates SSL certificates
                            RUN openssl req -x509 -newkey rsa:4096 -keyout safescale_key.pem -out safescale_cert.pem -days 90 -nodes -subj "/C=FR/ST=France/O=CS-SI/CN={{.HostIP}}" \
                             && openssl pkcs12 -export -name server-cert -in safescale_cert.pem -inkey safescale_key.pem -out safescale_keystore.p12 -password pass:safescale \
                             && keytool -importkeystore -destkeystore safescale.jks -srckeystore safescale_keystore.p12 -srcstoretype pkcs12 -alias server-cert -storepass safescale -keypass safescale -srcstorepass safescale \
                             && cp ./safescale.jks /opt/jboss/keycloak/standalone/configuration/

                            # Updates configuration
                            COPY standalone-ha.xml.patch keycloak/standalone/configuration/
                            RUN cd keycloak/standalone/configuration/ \
                             && patch -l <./standalone-ha.xml.patch

                            ADD ./TCP_PING.cli /opt/jboss/tools/cli/jgroups/discovery/
                            ADD ./JDBC_PING.cli /opt/jboss/tools/cli/jgroups/discovery/

                            COPY my-docker-entrypoint.sh /
                            RUN chmod 0550 /my-docker-entrypoint.sh

                            ENTRYPOINT [ "/my-docker-entrypoint.sh" ]
                            EOF

                            docker build --network host -t safescale/keycloak4platform:latest ${SF_ETCDIR}/keycloak4platform/build || sfFail 192
                            sfExit

                    secrets:
                        targets:
                            masters: any
                        run: |
                            if docker secret inspect safescale.keycloak.password.dbuser &>/dev/null; then
                                docker secret rm safescale.keycloak.password.dbuser
                            fi
                            KC_PASSWORD=$(sfRandomString 16 "[:alnum:]")
                            echo -n "$KC_PASSWORD" | docker secret create safescale.keycloak.password.dbuser - || sfFail 193
                            if docker secret inspect safescale.keycloak.password.admin &>/dev/null; then
                                docker secret rm safescale.keycloak.password.admin
                            fi
                            echo -n "{{ .KeycloakAdminPassword }}" | docker secret create safescale.keycloak.password.admin - || sfFail 194

                            echo -n $KC_PASSWORD | sfPgsqlCreateRole keycloak4platform LOGIN || sfFail 195
                            sfPgsqlCreateDatabase keycloak4platform keycloak4platform || sfFail 196
                            sfExit

                    stack:
                        targets:
                            masters: all
                        run: |
                            cat >${SF_ETCDIR}/keycloak4platform/stack.yml <<-EOF
                            version: '3.7'
                            services:
                                server:
                                    image: safescale/keycloak4platform:latest
                                    # environment:
                                    #     - KEYCLOAK_LOGLEVEL=DEBUG
                                    #     - ROOT_LOGLEVEL=DEBUG
                                    networks:
                                        - net
                                    ports:
                                        - published: 63009
                                          target: 8443
                                          mode: host
                                        - published: 63010
                                          target: 8080
                                          mode: host
                                    deploy:
                                        mode: global
                                        placement:
                                            constraints:
                                                - node.labels.safescale.host.role == master
                                        restart_policy:
                                            condition: on-failure
                                            delay: 5s
                                            max_attempts: 3
                                            window: 120s
                                    secrets:
                                        - password.postgres
                                        - password.dbuser
                                        - password.admin

                            secrets:
                                password.postgres:
                                    external: true
                                    name: safescale.postgresql.password.postgres
                                password.dbuser:
                                    external: true
                                    name: safescale.keycloak.password.dbuser
                                password.admin:
                                    external: true
                                    name: safescale.keycloak.password.admin

                            networks:
                                net:
                                    driver: overlay
                            EOF
                            # FIXME: forbid access on port 8080 from all but localhost
                            sfExit

                    start:
                        targets:
                            masters: any
                        run: |
                            docker stack deploy -c ${SF_ETCDIR}/keycloak4platform/stack.yml keycloak4platform || sfFail 197
                            sfRetry {{.TemplateOperationTimeout}} {{.TemplateOperationDelay}} "sfDoesDockerRunStack keycloak4platform" || sfFail 198
                            sfExit

            remove:
                pace: stack,db,image,cleanup
                steps:
                    stack:
                        targets:
                            masters: any
                        run: |
                            docker stack rm keycloak4platform || sfFail 192
                            docker secret rm safescale.keycloak.password.dbuser || true
                            docker secret rm safescale.keycloak.password.admin || true
                            sfExit

                    db:
                        targets:
                            masters: any
                        run: |
                            sfPgsqlDropDatabase keycloak4platform || sfFail 193
                            sfPgsqlDropRole keycloak4platform || sfFail 194
                            sfExit

                    image:
                        targets:
                            masters: all
                        run: |
                            docker image rm -f safescale/keycloak4platform:latest || true
                            sfExit

                    cleanup:
                        targets:
                            masters: all
                        run: |
                            rm -drf ${SF_ETCDIR}/keycloak4platform ${SF_VARDIR}/keycloak4platform
                            sfExit

    proxy:
        rules:
            - name: keycloak4platform_backend
              type: upstream
              targets:
                  masters: all
              content: |
                  {
                      "target": "{{.HostIP}}:63009",
                      "weight": 100,
                      "algorithm": "consistent-hashing",
                      "hash_on": "ip",
                      "healthchecks": {
                          "passive": {
                              "type": "https"
                          }
                      }
                  }

            - name: keycloak4platform_svc
              type: service
              targets:
                  masters: any
              content: |
                  {
                      "protocol": "https",
                      "host": "keycloak4platform_backend"
                  }

            - name: keycloak4platform_route
              type: route
              targets:
                  masters: any
              content: |
                  {
                        "paths": [ "/auth/" ],
                        "strip_path": false,
                        "protocols":["https"],
                        "service": { "id": "{{ .keycloak4platform_svc }}" }
                  }

...
