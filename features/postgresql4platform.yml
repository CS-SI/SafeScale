#
# Copyright 2018-2019, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
feature:
    suitableFor:
        host: no
        cluster: yes

    parameters:
        - PurgeOnRemoval=no
        - PostgresPassword=

    install:
        bash:
            check:
                pace: docker
                steps:
                    docker:
                        targets:
                            hosts: no
                            gateways: no
                            masters: any
                            nodes: no
                        run: |
                            sfDoesDockerRunStack postgresql4platform || sfFail 192
                            sfExit

            add:
                pace: network,pgsql-cfg,pgsql-img,pgpool-cfg,pgpool-img,reverseproxy,secrets,stack,start
                steps:
                    pgsql-cfg:
                        targets:
                            masters: all
                        run: |
                            mkdir -p ${SF_ETCDIR}/postgresql4platform/options.d ${SF_VARDIR}/postgresql4platform
                            chown -R 70:safescale ${SF_VARDIR}/postgresql4platform

                            cat >${SF_ETCDIR}/postgresql4platform/postgresql.conf <<-EOF
                            listen_addresses = '*'
                            max_connections = 500
                            data_directory = '/var/lib/postgresql/data'
                            synchronous_commit = on
                            shared_buffers = 128MB
                            timezone = 'UTC'
                            log_timezone = 'UTC'
                            autovacuum = on
                            track_counts = on
                            # password_encryption = scram-sha-256
                            password_encryption = md5
                            external_pid_file = '/var/run/postgresql/postmaster.pid'

                            wal_level = 'replica'
                            max_wal_senders = 15
                            max_replication_slots = 15
                            hot_standby = on
                            archive_mode = on
                            archive_command = '/bin/true'
                            wal_keep_segments = 500

                            # Locale
                            lc_messages = 'en_US.UTF-8'
                            lc_monetary = 'en_US.UTF-8'
                            lc_numeric = 'en_US.UTF-8'
                            lc_time = 'en_US.UTF-8'
                            default_text_search_config = 'pg_catalog.english'

                            shared_preload_libraries = 'repmgr'

                            include_dir = '/etc/postgresql/options.d'
                            EOF
                            chown 70:safescale ${SF_ETCDIR}/postgresql4platform/postgresql.conf

                            GWBRIDGE_SUBNET=$(docker network inspect docker_gwbridge | jq -r .[0].IPAM.Config[0].Subnet)
                            OVERLAY_SUBNET=$(docker network inspect postgresql4platform_net | jq -r .[0].IPAM.Config[0].Subnet)

                            cat >${SF_ETCDIR}/postgresql4platform/pg_hba.conf <<-HBAEOF
                            # TYPE  DATABASE        USER            ADDRESS             METHOD
                            local   all             all                                 trust
                            host    all             all             127.0.0.0/8         trust
                            host    all             all             ${GWBRIDGE_SUBNET}  md5 # scram-sha-256
                            host    all             all             ${OVERLAY_SUBNET}   md5 # scram-sha-256
                            host    all             all             {{.CIDR}}           md5 # scram-sha-256

                            local   replication     repmgr                              trust
                            host    replication     repmgr          127.0.0.0/8         trust
                            host    replication     repmgr          ${OVERLAY_SUBNET}   md5
                            host    replication     repmgr          {{.CIDR}}           md5

                            local   repmgr          repmgr                              trust
                            host    repmgr          repmgr          127.0.0.0/8         trust
                            host    repmgr          repmgr          ${OVERLAY_SUBNET}   md5
                            host    repmgr          repmgr          {{.CIDR}}           md5
                            HBAEOF
                            chown 70:safescale ${SF_ETCDIR}/postgresql4platform/pg_hba.conf

                            HOSTNAME={{.Hostname}}
                            NODE_ID=${HOSTNAME##*-}

                            cat >${SF_ETCDIR}/postgresql4platform/repmgr.conf <<-EOF
                            node_id=$NODE_ID
                            node_name=$HOSTNAME
                            conninfo='host=dbhost-${NODE_ID} port=5432 user=repmgr dbname=repmgr connect_timeout=2'
                            data_directory=/var/lib/postgresql/data
                            repmgrd_pid_file=/var/run/repmgr/repmgrd.pid

                            use_replication_slots = yes
                            monitoring_history = yes

                            log_file=/var/log/repmgr.log
                            log_level=INFO
                            log_facility=STDERR
                            log_status_interval=300

                            use_replication_slots=true
                            failover=automatic
                            reconnect_attempts=3
                            promote_command='repmgr -f /etc/postgresql/repmgr.conf standby promote --log-to-file'
                            follow_command='repmgr -f /etc/postgresql/repmgr.conf standby follow --log-to-file --upstream-node-id=%n'
                            log_file = '/dev/stdout'

                            service_start_command='pg_ctl -D /var/lib/postgresql/data start'
                            service_stop_command='pg_ctl -D /var/lib/postgresql/data stop -m fast'
                            service_restart_command='pg_ctl -D /var/lib/postgresql/data restart -m fast'
                            service_reload_command='pg_ctl -D /var/lib/postgresql/data reload'
                            EOF
                            chown 70:safescale ${SF_ETCDIR}/postgresql4platform/repmgr.conf
                            sfExit

                    pgpool-cfg:
                        targets:
                            masters: all
                        run: |
                            mkdir -p ${SF_VARDIR}/postgresql4platform/pgpool
                            touch ${SF_VARDIR}/postgresql4platform/pgpool/pool_passwd
                            chown 70:safescale ${SF_VARDIR}/postgresql4platform/pgpool/pool_passwd
                            chmode u+rw-x,g+r-wx,o-rwx ${SF_VARDIR}/postgresql4platform/pgpool/pool_passwd

                            cat >${SF_ETCDIR}/postgresql4platform/pgpool.conf.template <<-EOF
                            listen_addresses = '0.0.0.0'
                            port = 5432
                            pcp_port = 9898
                            ssl = off
                            pid_file_name = '/var/run/pgpool/pgpool.pid'

                            enable_pool_hba = on
                            authentication_timeout = 10

                            log_destination = 'stderr'
                            print_timestamp = on

                            exitover_on_backend_error = on
                            exitover_command = '/bin/true'

                            memory_cache_enabled = on
                            memqcache_method = 'shmem'

                            connection_cache = off

                            replication_mode = off

                            load_balance_mode = on
                            ignore_leading_white_space = on

                            master_slave_mode = on
                            master_slave_sub_mode = 'stream'
                            sr_check_period = 30
                            sr_check_user = 'postgres'
                            sr_check_password = '##SECRET##'

                            parallel_mode = off

                            health_check_period = 10
                            health_check_user = 'postgres'
                            health_check_password = '##SECRET##'

                            use_watchdog = off
                            EOF

                            HOSTS=( {{ range .MasterNames }}"{{.}}" {{ end }})
                            for (( i = 0; i < ${#HOSTS[@]}; i++ )); do
                                cat >>${SF_ETCDIR}/postgresql4platform/pgpool.conf.template <<-EOF

                            backend_hostname${i} = 'dbhost-$(( i + 1 ))'
                            backend_port${i} = 5432
                            backend_weight${i} = 1
                            backend_data_directory${i} = '/var/lib/postgresql/data'
                            backend_flag${i} = 'ALLOW_TO_FAILOVER'
                            EOF
                            done
                            chown 70:safescale ${SF_ETCDIR}/postgresql4platform/pgpool.conf.template
                            chmod u+rw-x,g+r-wx,o-rwx ${SF_ETCDIR}/postgresql4platform/pgpool.conf.template
                            sfExit

                    pgsql-img:
                        targets:
                            masters: all
                        run: |
                            mkdir -p ${SF_ETCDIR}/postgresql4platform/build/pgsql

                            cat >${SF_ETCDIR}/postgresql4platform/build/pgsql/my-docker-entrypoint.sh <<-EOF
                            #!/bin/bash

                            export PGDATA=/var/lib/postgresql/data
                            mkdir -p \${PGDATA} &>/dev/null

                            update_postgresql_conf() {
                                rm -f \${PGDATA}/postgresql.conf
                                ln -sf /etc/postgresql/postgresql.conf \${PGDATA}/postgresql.conf
                            }

                            update_pghba_conf() {
                                rm -f \${PGDATA}/pg_hba.conf
                                ln -sf /etc/postgresql/pg_hba.conf \${PGDATA}/pg_hba.conf
                            }

                            wait_for_postgres_on_host() {
                                local dbhost=\$1
                                local timeout=\$2
                                [ ! -n \$timeout ] && timeout=60
                                timeout \$timeout bash -c "while ! psql -h \$dbhost -c 'select 1' &>/dev/null; do sleep 5; done"
                            }

                            wait_for_local_postgres() {
                                wait_for_postgres_on_host localhost \$1
                            }

                            wait_for_dbmaster() {
                                wait_for_postgres_on_host \$REPMGR_PRIMARY_HOST \$1
                            }

                            if [ ! -f \${PGDATA}/PG_VERSION ]; then
                                mkdir -p \${PGDATA} &>/dev/null
                                rm -rf \${PGDATA}/*
                                initdb --auth=md5 --username=postgres --pwfile=/run/secrets/postgres.password
                            fi

                            POSTGRES_PASSWORD=\$(cat /run/secrets/postgres.password)
                            REPMGR_PASSWORD=\$(cat /run/secrets/repmgr.password)

                            # set postgresql passwords
                            cat >\$HOME/.pgpass <<-EOF2
                            *:5432:*:postgres:\$POSTGRES_PASSWORD
                            {{ .DefaultRouteIP }}:63008:*:postgres:\$POSTGRES_PASSWORD
                            *:5432:*:repmgr:\$REPMGR_PASSWORD
                            EOF2
                            chmod 0600 \$HOME/.pgpass
                            chown postgres:postgres \$HOME/.pgpass

                            nodeid=\$(grep node_id /etc/postgresql/repmgr.conf | cut -d= -f2)
                            if [ "\$nodeid" = "1" ]; then
                                # We are on master, starting postgres
                                echo -n "Waiting postgresql master is ready... "
                                update_postgresql_conf
                                update_pghba_conf
                                pg_ctl start &>/dev/null && wait_for_local_postgres 60
                                [ \$? -ne 0 ] && echo "Failed." && sfFail 1
                                op=-1
                                pg_ctl start &>/dev/null && wait_for_local_postgres 60 && op=\$?
                                [ \$op -ne 0 ] && echo "Failed." && sfFail 1
                                echo OK

                                # Checking if repmgr needs to be initialized
                                configured=\$(psql -qAt -U repmgr repmgr -c "SELECT 1 FROM pg_tables WHERE tablename='nodes'")
                                if [ "\$configured" != "1" ]; then
                                    echo -n "repmgr database not ready, creating it... "
                                    cat <<-SQLEOF | psql
                            CREATE ROLE repmgr WITH PASSWORD '\$REPMGR_PASSWORD';
                            ALTER ROLE repmgr LOGIN;
                            ALTER ROLE repmgr REPLICATION;
                            ALTER ROLE repmgr SUPERUSER;

                            CREATE DATABASE repmgr OWNER repmgr;
                            SQLEOF
                                    echo done

                                    echo -n "registering host as primary postgresql instance... "
                                    op=-1
                                    repmgr --config-file=/etc/postgresql/repmgr.conf primary register && op=\$?
                                    [ \$op -ne 0 ] && echo "Failed." && sfFail 2
                                fi
                                pg_ctl stop -m fast &>/dev/null
                            else
                                # We are on a slave
                                echo -n "Waiting postgresql master is ready... "
                                wait_for_dbmaster 60
                                [ \$? -ne 0 ] && echo Failed && sfFail 3
                                echo OK
                                registered=\$(psql -qAt -h "\$REPMGR_PRIMARY_HOST" -U repmgr repmgr -c "SELECT 1 FROM repmgr.nodes WHERE node_id=\${nodeid}")
                                if [ "\$registered" != "1" ]; then
                                    echo -n "Initializing postgresql instance as hot-standby slave with repmgr... "
                                    rm -Rf "\$PGDATA" && mkdir -p "\$PGDATA"
                                    set -x
                                    repmgr --config-file=/etc/postgresql/repmgr.conf --host="\$REPMGR_PRIMARY_HOST" --username=repmgr --dbname=repmgr -F --fast-checkpoint standby clone
                                    set +x
                                    update_postgresql_conf
                                    update_pghba_conf
                                    op=-1
                                    pg_ctl start &>/dev/stdout && wait_for_local_postgres 60 && op=\$?
                                    [ \$op -ne 0 ] && echo "exited to start postgresql instance." && sfFail 4
                                    echo -n "Registering postgresql instance as hot-standby... "
                                    op=-1
                                    repmgr --config-file=/etc/postgresql/repmgr.conf --host="\$REPMGR_PRIMARY_HOST" --username=repmgr --dbname=repmgr standby register && op=\$?
                                    [ \$op -ne 0 ] && echo "exited." && sfFail 5
                                    echo done
                                fi
                            fi
                            echo done

                            # TODO: find a way to mitigate restarts from exiture
                            # - select conninfo,type,active from repmgr.nodes then consolidate results
                            # - If current instance believes it's a master, and there is another master from the results with more active=t,
                            #   stop the current instance and follow the other master. pg_rewind needed ?
                            # - If current instance is a slave, check the current master is the current one from consolidated results; if
                            #   not, follow the new one
                            #
                            #declare -a results
                            #local_node_id=\$(grep node_id /etc/postgresql/repmgr.conf | cut -d= -f2)
                            #local_master_count=0
                            #overall_master_count=0
                            #for i in seq 1 {{ len .MasterIPs }}; do
                            #    wait_for_postgres_on_host dbhost-\${i} 60 || continue
                            #    result=\$(psql -c "select node_id,upstream_node_id,conninfo,type,active from repmgr.nodes sort by node_id" | tail -n -2) || continue
                            #    while IFS="|" read -r node_id,upstream_node_id,conninfo,type,active; do
                            #        if [ \$active = t -a \$type = master ]; then
                            #            overall_master_count=\$(( \$overall_master_count +1 ))
                            #            if [ \$node_id -eq \$local_node_id ]; then
                            #                local_master_count=\$(( \$local_master_count++ ))
                            #            else
                            #                nodes_master_count[\$node_id]=\$(( \${nodes_master_count[\$node_id]:-0} +1 ))
                            #            fi
                            #        fi
                            #    done <<< "\$result"
                            #done
                            ## Find the dbhost with the most active=t,type=primary
                            #designated_master=
                            #designated_master_count=0
                            #for i in seq 1 {{ len .MasterIPs }}; do
                            #    if [ \$designated_master_count -lt \${nodes_master_count[\${i}]} ]; then
                            #        designated_master_count=\${nodes_master_count[\${i}]}
                            #        designated_master=dbhost-\${i}
                            #    fi
                            #done
                            ## Check if there is no master; should not happen
                            #if [ \$designated_master_count -lt 1 ]; then
                            #    echo "Postgresql cluster is in inconsistent state:"
                            #    echo "no primary instance registered!"
                            #    sfFail 40
                            #fi
                            ## A new loop to find if there is at least 2 dbhosts with the same count of master role (which can't be
                            ## automatically mitigated)
                            #dont_mitigate=0
                            #for i in seq 1 {{ len .MasterIPs }}; do
                            #    if [ \$designated_master_count -eq \${nodes_master_count[\${i}]} ]; then
                            #        echo "Postgresql cluster is in inconsistent state:"
                            #        echo "2 instances (\$designated_master and dbhost-\${i}) believe there are master with equal chances to be right."
                            #        echo "Manual operation is necessary."
                            #        dont_mitigate=1
                            #    fi
                            #done
                            #if [ \$dont_mitigate -eq 0 ]; then
                            #    if [ \$local_master_count -gt 0 ]; then
                            #        # local instance thinks it's the master
                            #        if [ \$overall_master_count -gt 1 ]; then
                            #            # multiple masters, find the one with most active=t and make the local intance a host-standby
                            #        else
                            #            # make sure the other instances are following this master ? Is it needed ?
                            #        fi
                            #    else
                            #        # instance doesn't think it's a master, make it follow the designated master if needed
                            #    fi
                            #fi

                            # Now starts what is expected to run
                            pg_ctl stop -m fast &>/dev/null
                            rm -f \${PGSQL_DATA}/postmaster.pid /var/run/postmaster.pid /tmp/.s.PGSQL.5432
                            if [ "\$1" = "postgres" ]; then
                                shift
                                postgres --config-file=/etc/postgresql/postgresql.conf "\$@" &
                                wait_for_local_postgres 60
                                exec repmgrd -f /etc/postgresql/repmgr.conf --daemonize=false --verbose
                            else
                                exec postgres --config-file=/etc/postgresql/postgresql.conf "\$@"
                            fi
                            EOF

                            cat >${SF_ETCDIR}/postgresql4platform/build/pgsql/Dockerfile <<-EOF
                            FROM alpine:3

                            RUN apk update \
                             && apk add --no-cache bash postgresql repmgr repmgr-daemon tini

                            RUN mkdir -p /var/run/postgresql /var/run/repmgr \
                             && chown postgres /var/run/postgresql /var/run/repmgr

                            COPY ./my-docker-entrypoint.sh /
                            RUN chmod a+rx /my-docker-entrypoint.sh

                            RUN rm /etc/repmgr.conf \
                             && ln -sf /etc/postgresql/rpmgr.conf /etc

                            USER postgres

                            ENTRYPOINT ["/sbin/tini", "--", "/my-docker-entrypoint.sh"]
                            CMD ["postgres"]
                            EOF

                            docker build --network host -t pgsql4platform:latest ${SF_ETCDIR}/postgresql4platform/build/pgsql || sfFail 192
                            sfExit

                    pgpool-img:
                        targets:
                            masters: all
                        run: |
                            mkdir -p ${SF_ETCDIR}/postgresql4platform/build/pgpool

                            cat >${SF_ETCDIR}/postgresql4platform/build/pgpool/update_password.sh <<-'EOF'
                            #!/bin/bash
                            [ $# -ne 2 ] && echo "invalid parameters" && exit 1

                            USERNAME=$1
                            PASSWORD="$2"

                            grep -v "^${USERNAME}:" /etc/postgresql/pool_passwd | grep -e ".*:md5.*" >/tmp/pool_passwd.new
                            >/etc/postgresql/pool_passwd

                            cat /tmp/pool_passwd.new >>/etc/postgresql/pool_passwd
                            rm /tmp/pool_passwd.new
                            pg_md5 --config-file=/etc/postgresql/pgpool.conf -m --username=$USERNAME "$PASSWORD"
                            exit $?
                            EOF

                            cat >${SF_ETCDIR}/postgresql4platform/build/pgpool/my-docker-entrypoint.sh <<-EOF
                            #!/bin/bash

                            cat >/etc/postgresql/pool_hba.conf <<-INNEREOF
                            # TYPE  DATABASE    USER    CIDR-ADDRESS    METHOD
                            host    all         all     all             md5
                            INNEREOF

                            DB_PASSWORD=\$(cat /var/run/secrets/postgres.password)
                            cp /etc/postgresql/pgpool.conf.template /etc/postgresql/pgpool.conf
                            sed -i "s/##SECRET##/\$DB_PASSWORD/g" /etc/postgresql/pgpool.conf

                            echo "postgres:\$(pg_md5 --config-file=/etc/postgresql/pgpool.conf \$DB_PASSWORD)" >>/etc/postgresql/pcp.conf

                            echo "*:9898:postgres:\$DB_PASSWORD" >~/.pcppass
                            chmod 0600 ~/.pcppass

                            # Update (or create) the md5 password for user postgres
                            pg_md5 --config-file /etc/postgresql/pgpool.conf --md5auth --username=postgres "\$DB_PASSWORD"

                            exec pgpool -n -f /etc/postgresql/pgpool.conf -F /etc/postgresql/pcp.conf -a /etc/postgresql/pool_hba.conf
                            EOF

                            cat >${SF_ETCDIR}/postgresql4platform/build/pgpool/Dockerfile <<-EOF
                            FROM alpine:3

                            RUN apk update \
                             && apk add --no-cache bash pgpool postgresql-client tini

                            RUN mkdir -p /etc/postgresql /var/lib/postgresql /var/run/pgpool /var/log/pgpool \
                             && chown postgres /etc/postgresql /var/lib/postgresql /var/run/pgpool /var/log/pgpool

                            COPY ./my-docker-entrypoint.sh /
                            COPY ./update_password.sh /usr/local/bin/
                            RUN chmod a+rx /my-docker-entrypoint.sh /usr/local/bin/update_password.sh

                            USER postgres

                            ENTRYPOINT ["/sbin/tini", "--", "/my-docker-entrypoint.sh"]
                            EOF

                            docker build --network host -t pgpool4platform:latest ${SF_ETCDIR}/postgresql4platform/build/pgpool || sfFail 192
                            sfExit

                    stack:
                        targets:
                            masters: all
                        run: |
                            MASTERS="{{ range .MasterNames }}{{.}},{{end}}"
                            MASTERS=${MASTERS%,}
                            HOSTNAME_RADIX={{ .Hostname }}
                            HOSTNAME_RADIX=${HOSTNAME_RADIX%-*}
                            DBNODES="dbmaster"
                            DBSLAVES=
                            IFS=',' read -a HOSTS <<< "$MASTERS"
                            echo HOSTS=${HOSTS[@]}
                            for HOST in ${HOSTS[@]}; do
                                if [ "$HOST" != "${HOSTNAME_RADIX}-1" ]; then
                                    INDEX=${HOST##*-}
                                    DBNODES="$DBNODES dbslave-${INDEX}"
                                    DBSLAVES="$DBSLAVES dbslave-${INDEX}"
                                fi
                            done

                            cat >${SF_ETCDIR}/postgresql4platform/stack.yml <<-EOF
                            version: '3.7'

                            secrets:
                                postgres.password:
                                    external: true
                                    name: safescale.postgresql.password.postgres
                                repmgr.password:
                                    external: true
                                    name: safescale.postgresql.password.repmgr

                            networks:
                                net:
                                    driver: overlay
                                    external: true
                                    name: postgresql4platform_net

                            services:
                                dbmaster:
                                    image: pgsql4platform:latest
                                    environment:
                                        - REPMGR_PRIMARY_HOST=dbmaster
                                        - REPMGR_PARTNER_NODES=${DBNODES}
                                        - REPMGR_NODE_NAME=dbmaster
                                        - REPMGR_NODE_NETWORK_NAME=dbmaster
                                    volumes:
                                        - ${SF_ETCDIR}/postgresql4platform/postgresql.conf:/etc/postgresql/postgresql.conf:ro
                                        - ${SF_ETCDIR}/postgresql4platform/options.d:/etc/postgresql/options.d:ro
                                        - ${SF_ETCDIR}/postgresql4platform/repmgr.conf:/etc/postgresql/repmgr.conf:ro
                                        - ${SF_ETCDIR}/postgresql4platform/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
                                        - ${SF_VARDIR}/postgresql4platform:/var/lib/postgresql
                                    networks:
                                        net:
                                            aliases:
                                                - dbmaster
                                                - dbhost-1
                            {{ if eq (len .MasterNames) 1 }}
                                    ports:
                                        - published: 63008
                                          target: 5432
                                          mode: host
                            {{ end }}
                                    # healthcheck:
                                    #     test: ["CMD", "pg_isready", "-U", "postgres"]
                                    #     interval: 10s
                                    #     timeout: 5s
                                    #     retries: 5
                                    #     start_period: 30s
                                    deploy:
                                        mode: global
                                        placement:
                                            constraints:
                                                - node.hostname == ${HOSTNAME_RADIX}-1
                                        restart_policy:
                                            condition: on-failure
                                            delay: 5s
                                            max_attempts: 3
                                            window: 120s
                                        resources:
                                            limits:
                                                memory: 128M
                                            reservations:
                                                memory: 64M
                                    secrets:
                                        - postgres.password
                                        - repmgr.password
                            EOF

                            if [ ! -z "$DBSLAVES" ]; then
                                echo DBSLAVES=$DBSLAVES
                                for DBSLAVE in ${DBSLAVES}; do
                                    INDEX=${DBSLAVE##*-}
                                    SLAVE_HOST=${HOSTNAME_RADIX}-$INDEX
                                    cat >>${SF_ETCDIR}/postgresql4platform/stack.yml <<-EOF

                                ${DBSLAVE}:
                                    image: pgsql4platform:latest
                                    environment:
                                        - REPMGR_PRIMARY_HOST=dbmaster
                                        - REPMGR_PARTNER_NODES=${DBNODES}
                                        - REPMGR_NODE_NAME=${DBSLAVE}
                                        - REPMGR_NODE_NETWORK_NAME=${DBSLAVE}
                                    volumes:
                                        - ${SF_ETCDIR}/postgresql4platform/postgresql.conf:/etc/postgresql/postgresql.conf:ro
                                        - ${SF_ETCDIR}/postgresql4platform/options.d:/etc/postgresql/options.d:ro
                                        - ${SF_ETCDIR}/postgresql4platform/repmgr.conf:/etc/postgresql/repmgr.conf:ro
                                        - ${SF_ETCDIR}/postgresql4platform/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
                                        - ${SF_VARDIR}/postgresql4platform:/var/lib/postgresql
                                    networks:
                                        net:
                                            aliases:
                                                - ${DBSLAVE}
                                                - dbhost-${INDEX}
                                    # healthcheck:
                                    #     test: ["CMD", "pg_isready", "-U", "postgres"]
                                    #     interval: 10s
                                    #     timeout: 5s
                                    #     retries: 5
                                    #     start_period: 30s
                                    deploy:
                                        mode: global
                                        placement:
                                            constraints:
                                                - node.hostname == ${SLAVE_HOST}
                                        restart_policy:
                                            condition: on-failure
                                            delay: 5s
                                            max_attempts: 3
                                            window: 120s
                                        resources:
                                            limits:
                                                memory: 128M
                                            reservations:
                                                memory: 64M
                                    secrets:
                                        - postgres.password
                                        - repmgr.password
                            EOF
                                done

                                cat >>${SF_ETCDIR}/postgresql4platform/stack.yml <<-EOF
                                pooler:
                                    image: pgpool4platform:latest
                                    volumes:
                                        - ${SF_ETCDIR}/postgresql4platform/pgpool.conf.template:/etc/postgresql/pgpool.conf.template:ro
                                        - ${SF_VARDIR}/postgresql4platform/pgpool/pool_passwd:/etc/postgresql/pool_passwd
                                    networks:
                                        - net
                                    ports:
                                        - published: 63008
                                          target: 5432
                                          mode: host
                                    deploy:
                                        mode: global
                                        placement:
                                            constraints:
                                                - node.labels.safescale.host.role == master
                                        restart_policy:
                                            condition: on-failure
                                            delay: 5s
                                            max_attempts: 3
                                            window: 120s
                                        resources:
                                            limits:
                                                memory: 128M
                                            reservations:
                                                memory: 64M
                                    secrets:
                                        - postgres.password
                            EOF
                            fi
                                chmod go-rwx ${SF_ETCDIR}/postgresql4platform/stack.yml
                            sfExit

                    reverseproxy:
                        targets:
                            gateways: all
                        run: |
                            if [ -d ${SF_ETCDIR}/edgeproxy4network ]; then
                                TARGET_DIR=${SF_ETCDIR}/edgeproxy4network
                            elif [ -d ${SF_ETCDIR}/kong4gateway ]; then
                                TARGET_DIR=${SF_ETCDIR}/kong4gateway
                            fi
                            [ -z "${TARGET_DIR+x}" ] && sfFail 197

                            cat >${TARGET_DIR}/includes/postgresql4platform.conf <<-'EOF'
                            upstream postgresql4platform {
                                {{range .MasterIPs}}server {{.}}:63008;
                                {{end}}
                            }

                            server {
                                listen 63008;
                                proxy_pass postgresql4platform;
                            }
                            EOF
                            sfReverseProxyReload
                            sfExit

                    network:
                        targets:
                            masters: any
                        run: |
                            if ! docker network list --filter 'name=postgresql4platform_net' | grep postgresql4platform_net; then
                                docker network create --attachable -d overlay --scope swarm postgresql4platform_net || sfFail 193
                            fi
                            sfExit

                    secrets:
                        targets:
                            masters: any
                        run: |
                            if docker secret inspect safescale.postgresql.password.password.postgres &>/dev/null; then
                                docker secret rm safescale.postgresql.password.postgres || sfFail 193
                            fi
                            if [ ! -z "{{ .PostgresPassword }}" ]; then
                                echo -n "{{ .PostgresPassword }}" | docker secret create safescale.postgresql.password.postgres - || sfFail 194
                            else
                                echo -n "$(sfRandomString 16 "[:alnum:]")" | docker secret create safescale.postgresql.password.postgres - || sfFail 194
                            fi
                            if docker secret inspect safescale.postgresql.password.repmgr &>/dev/null; then
                                docker secret rm safescale.postgresql.password.repmgr || sfFail 195
                            fi
                            echo -n "$(sfRandomString 16 "[:alnum:]")" | docker secret create safescale.postgresql.password.repmgr - || sfFail 196
                            sfExit

                    start:
                        targets:
                            masters: any
                        run: |
                            docker stack deploy -c ${SF_ETCDIR}/postgresql4platform/stack.yml postgresql4platform || sfFail 197
                            sfRetry 5m 5 sfDoesDockerRunStack postgresql4platform || sfFail 198
                            sfExit

            remove:
                pace: stack,cleanup
                steps:
                    stack:
                        targets:
                            masters: any
                        run: |
                            if [ -f ${SF_ETCDIR}/postgresql4platform/stack.yml ]; then
                                docker stack rm postgresql4platform || sfFail 192
                            fi
                            sfExit

                    cleanup:
                        targets:
                            masters: all
                        run: |
                            sfDeleteDockerImage pgsql4platform:latest || true
                            sfDeleteDockerImage pgpool4platform:latest || true
                            docker network rm postgresql4platform_net || true
                            docker secret rm safescale.postgresql.password.postgres safescale.postgresql.password.repmgr || true
                            PURGE_ON_REMOVAL="{{ .PurgeOnRemoval }}"
                            if [ "${PURGE_ON_REMOVAL,,}" = "yes" -o "${PURGE_ON_REMOVAL,,}" = "true" ]; then
                                rm -rf ${SF_ETCDIR}/postgresql4platform ${SF_VARDIR}/postgresql4platform
                            fi
                            sfExit

...