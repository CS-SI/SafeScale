#
# Copyright 2018-2020, CS Systemes d'Information, http://csgroup.eu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
feature:
    suitableFor:
        host: yes
        cluster: no
    requirements:
        features:
            - docker

    install:
        bash:
            check:
                pace: image
                steps:
                    image:
                        targets:
                            hosts: yes
                        run: |
                            docker image ls {{ "--format '{{.Repository}}:{{.Tag}}'" }} | grep 'proxycache:latest' &>/dev/null

            add:
                pace: squid
                steps:
                    squid:
                        targets:
                            hosts: yes
                        timeout: 10
                        run: |
                            mkdir -p ${SF_BASEDIR}/data/proxycache/cache ${SF_VARDIR}/run ${SF_TMPDIR}/proxycache.image
                            cd ${SF_TMPDIR}/proxycache.image

                            cat >entrypoint.sh <<'EOF'
                            #!/bin/sh
                            chown -R squid:squid /var/cache/squid
                            chgrp tty /dev/pts /dev/pts/0
                            chmod g+w /dev/pts /dev/pts/0
                            if [ ! -d /var/cache/squid/00 ]; then
                                    echo "Initializing cache..."
                                    /usr/sbin/squid -Nz -f /etc/squid/squid.conf
                            fi
                            echo "Starting squid..."
                            exec /usr/sbin/squid -NYCd 1 -f /etc/squid/squid.conf
                            EOF

                            cat >squid.conf <<'EOF'
                            acl localnet src 10.0.0.0/8 # RFC1918 possible internal network
                            acl localnet src 172.16.0.0/12  # RFC1918 possible internal network
                            acl localnet src 192.168.0.0/16 # RFC1918 possible internal network
                            acl localnet src fc00::/7       # RFC 4193 local private network range
                            acl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines
                            acl k8snet src 10.96.0.0/12
                            acl k8snet src 10.100.0.0/16

                            acl SSL_ports port 443
                            acl Safe_ports port 80
                            acl Safe_ports port 21
                            acl Safe_ports port 443
                            acl Safe_ports port 1025-65535
                            acl CONNECT method CONNECT

                            http_access deny !Safe_ports
                            http_access allow localhost manager
                            http_access deny manager

                            http_access allow localnet
                            http_access allow localhost
                            http_access deny all

                            http_port 3128

                            ssl_bump peek all
                            ssl_bump splice all
                            ssl_bump bump all

                            coredump_dir /var/cache/squid

                            refresh_pattern whl$      1440 100% 10080
                            refresh_pattern gpg$      1440 100% 10080
                            refresh_pattern deb$      1440 100% 10080
                            refresh_pattern udeb$     1440 100% 10080
                            refresh_pattern rpm$      1440 100% 10080
                            refresh_pattern gz$       1440 100% 10080
                            refresh_pattern tar$      1440 100% 10080
                            refresh_pattern tar.gz$   1440 100% 10080
                            refresh_pattern tar.xz$   1440 100% 10080
                            refresh_pattern tar.bz2$  1440 100% 10080
                            refresh_pattern tgz$      1440 100% 10080
                            refresh_pattern zip$      1440 100% 10080
                            refresh_pattern jar$      1440 100% 10080
                            refresh_pattern hpi$      1440 100% 10080
                            refresh_pattern apk$      1440 100% 10080
                            refresh_pattern war$      1440 100% 10080
                            refresh_pattern \/(APKINDEX)(\.tar\.gz)$ 0 0% 0 refresh-ims
                            refresh_pattern \/(Packages|Sources)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
                            refresh_pattern \/Release(|\.gpg)$ 0 0% 0 refresh-ims
                            refresh_pattern \/InRelease$ 0 0% 0 refresh-ims
                            refresh_pattern \/(Translation-.*)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
                            refresh_pattern changelogs.ubuntu.com\/.*  0  1% 1
                            refresh_pattern ^ftp:     1440  20% 10080
                            refresh_pattern -i (/cgi-bin/|\?) 0 0%  0
                            refresh_pattern .   0 20% 4320

                            access_log stdio:/dev/stdout
                            cache_log stdio:/dev/stdout
                            cache_store_log stdio:/dev/stdout

                            maximum_object_size 1024 MB
                            cache_dir aufs /var/cache/squid 10000 16 256
                            cache_mem 500 MB
                            maximum_object_size_in_memory 10240 KB

                            cache allow localnet
                            cache deny k8snet
                            EOF

                            cat >Dockerfile <<'EOF'
                            FROM alpine:latest
                            MAINTAINER SafeScale C-S <safescale@c-s.fr>

                            RUN apk --update --no-cache add acf-squid shadow \
                             && rm -fr /var/cache/apk/* /tmp/* /root/.cache /root/.cached
                            RUN mkdir -p /opt/safescale
                            ADD entrypoint.sh /opt/safescale/entrypoint.sh
                            ADD squid.conf /etc/squid/squid.conf
                            RUN chmod a+rx /opt/safescale/entrypoint.sh
                            RUN usermod -aG tty squid

                            EXPOSE 3128
                            VOLUME ["/var/cache/squid"]

                            CMD ["/opt/safescale/entrypoint.sh"]
                            EOF

                            cat >${SF_VARDIR}/run/proxycache.compose.yml <<-'EOF'
                            version: '2.1'
                            services:
                                server:
                                    image: proxycache:latest
                                    volumes:
                                        - /opt/safescale/data/proxycache/cache:/var/cache/squid
                                    ports:
                                        - "{{.HostIP}}:3128:3128"
                                    restart: always
                                    tty: true
                            EOF

                            sfRetry {{.TemplateOperationTimeout}} {{.TemplateOperationDelay}} docker build --rm --no-cache -t proxycache:latest --network=host . && \
                            cd ${SF_TMPDIR} && rm -rf proxycache.image || sfFail 192

                            docker-compose -f ${SF_VARDIR}/run/proxycache.compose.yml -p proxycache up -d || sfFail 514

            remove:
                pace: container
                steps:
                    container:
                        targets:
                            host: yes
                        run: |
                            docker-compose -f ${SF_VARDIR}/run/proxycache.compose.yml rm -f
                            docker image rm -f proxycache:latest

    service:
        start: |
            docker-compose -f ${SF_VARDIR}/run/proxycache.feature.yml up -d

        stop: |
            docker-compose -f ${SF_VARDIR}/run/proxycache.feature.yml down

        pause: |
            docker-compose -f ${SF_VARDIR}/run/proxycache.feature.yml pause

        unpause: |
            docker-compose -f ${SF_VARDIR}/run/proxycache.feature.yml unpause

        state: |
            docker ps | grep proxycache &>/dev/null

...
