#
# Copyright 2018-2019, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
feature:
    suitableFor:
        host: yes
        cluster: no
    requirements:
        features:
            - docker
            - docker-compose
    install:
        bash:
            check:
                pace: curl
                steps:
                    curl:
                        targets:
                            hosts: yes
                        run: |
                            curl -Ssl -I -k https://localhost:8444/ 2>&1 | grep "HTTP/1.1 200 OK" &>/dev/null

            add:
                pace: compose
                steps:
                    compose:
                        wallTime: 10
                        targets:
                            hosts: yes
                        run: |
                            mkdir -p /opt/safescale/data/reverseproxy/postgresql /opt/safescale/run
                            cat >/opt/safescale/run/reverseproxy.compose.yml <<-'EOF'
                            version: '2.1'
                            services:
                                kong-database:
                                    image: postgres:9
                                    environment:
                                        - POSTGRES_USER=kong
                                        - POSTGRES_DB=kong
                                    volumes:
                                        - /opt/safescale/data/reverseproxy/postgresql:/var/lib/postgresql/data
                                    restart: always
                                    healthcheck:
                                        test: ["CMD", "pg_isready", "-U", "kong"]
                                        interval: 10s
                                        timeout: 5s
                                        retries: 5

                                kong-migration:
                                    image: kong:1.0
                                    depends_on:
                                        kong-database:
                                            condition: service_healthy
                                    environment:
                                        - KONG_DATABASE=postgres
                                        - KONG_PG_HOST=kong-database
                                    command: kong migrations bootstrap # up

                                kong-proxy:
                                    image: kong:1.0
                                    depends_on:
                                        kong-database:
                                            condition: service_healthy
                                        kong-migration:
                                            condition: service_started
                                    environment:
                                        - KONG_DATABASE=postgres
                                        - KONG_PG_HOST=kong-database
                                        - KONG_PG_DATABASE=kong
                                        - KONG_PROXY_ACCESS_LOG=/dev/stdout
                                        - KONG_ADMIN_ACCESS_LOG=/dev/stdout
                                        - KONG_PROXY_ERROR_LOG=/dev/stderr
                                        - KONG_ADMIN_ERROR_LOG=/dev/stderr
                                        - KONG_ADMIN_LISTEN=0.0.0.0:8444 ssl
                                    ports:
                                        - "443:8443"
                                        - "127.0.0.1:8444:8444"
                                    restart: always
                                    healthcheck:
                                        test: ["CMD-SHELL", "curl -I -s -k -L https://127.0.0.1:8444 || exit 1"]
                                        interval: 5s
                                        retries: 10
                            EOF
                            docker-compose -f /opt/safescale/run/reverseproxy.compose.yml -p reverseproxy up -d
                            RETRY=0; until docker ps --all | grep reverseproxy_kong-migration_1 | grep Exited || ((RETRY++ >= 60)); do sleep 5; done && sleep 5
                            iptables -t filter -A INPUT -p tcp --dport https -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
                            sfSaveIptablesRules

            remove:
                pace: compose
                steps:
                    compose:
                        targets:
                            hosts: yes
                        run: |
                            docker-compose -f /opt/safescale/run/reverseproxy.compose.yml -p reverseproxy rm --stop -v --force || exit 513
                            rm -rf /opt/safescale/run/reverseproxy.compose.yml /opt/safescale/data/reverseproxy

    service:
        start: |
            docker-compose -f /opt/safescale/reverseproxy.feature.yml up -d

        stop: |
            docker-compose -f /opt/safescale/reverseproxy.feature.yml down kong-proxy

        pause: |
            docker-compose -f /opt/safescale/reverseproxy.feature.yml pause

        unpause: |
            docker-compose -f /opt/safescale/reverseproxy.feature.yml unpause

        state: |
            docker ps | grep kong-proxy &>/dev/null

...