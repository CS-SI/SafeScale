/*
 * Copyright 2018-2020, CS Systemes d'Information, http://www.c-s.fr
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package safescale_protocol;
option go_package = "protocol";

import "github.com/golang/protobuf/ptypes/empty/empty.proto";
import "google/protobuf/timestamp.proto";


// Client Requests

message ClientID {
    string hostname = 1;
    string userid = 2;
    string process_id = 3;
    string parent_process_id = 4;

}

message ClientRequest {
    ClientID client_id = 1;
    google.protobuf.Timestamp timestamp = 2;
}

// Tenants

message Tenant{
    string name = 1;
    string provider = 2;
}

message TenantList{
    repeated Tenant tenants = 1;
}

service TenantService{
    rpc List (google.protobuf.Empty) returns (TenantList){}
    rpc Set (TenantName) returns (google.protobuf.Empty){}
    rpc Get (google.protobuf.Empty) returns (TenantName){}
    // rpc StorageList (google.protobuf.Empty) returns (TenantList){}
    // rpc StorageSet (TenantNameList) returns (google.protobuf.Empty){}
    // rpc StorageGet (google.protobuf.Empty) returns (TenantNameList){}
}

message Image{
    string id = 1;
    string name = 2;
}

message Reference{
    string tenant_id = 1;
    string id = 2;
    string name = 3;
}

message TenantName{
    string name = 1;
}

message TenantNameList{
    repeated string names = 1;
}

message ImageList{
    repeated Image images= 1;
}

message ImageListRequest{
    bool all = 1;
}

service ImageService{
    rpc List(ImageListRequest) returns (ImageList){}
}


// // safescale data ...

// message File {
//     string localPath = 1;
//     string name = 2;
//     string date = 3;
//     int64 size = 4;
//     repeated string buckets = 5;
// }

// message FileList {
//     repeated File files = 1;
// }

// service DataService{
//     rpc Push (File) returns (google.protobuf.Empty){}
//     rpc Pull (File) returns (google.protobuf.Empty){}
//     rpc Delete (File) returns (google.protobuf.Empty){}
//     rpc List (google.protobuf.Empty) returns (FileList){}
// }

// safescale network create net1 --cidr="192.145.0.0/16" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" (par défault "192.168.0.0/24", on crée une gateway sur chaque réseau: gw_net1)
// safescale network list
// safescale network delete net1
// safescale network inspect net1

message VirtualIp {
    string id = 1;
    string name = 2;
    string network_id = 3;
    string private_ip = 4;
    string public_ip = 5;
    repeated Host hosts = 6;
}

message NetworkDefinition{
    string name = 2;
    string cidr = 3;
    GatewayDefinition gateway = 4;
    bool fail_over = 5;
}

message GatewayDefinition{
    int32 cpu = 1;  // Deprecated: replaced by sizing field
    float ram = 2;  // Deprecated: replaced by sizing field
    int32 disk = 3; // Deprecated: replaced by sizing field
    string image_id = 5;
    string name = 6;
    int32 gpu_count = 7;    // Deprecated: replaced by sizing field
    string gpu_type = 8;    // Deprecated: replaced by sizing field
    HostSizing sizing = 9;
}

message Network{
    string id = 1;
    string name = 2;
    string cidr = 3;
    string gateway_id = 4;
    string secondary_gateway_id = 5;
    VirtualIp virtual_ip = 6;
    bool failover = 7;
    NetworkState state = 8;
}

message NetworkList{
    repeated Network networks = 1;
}

message NetworkListRequest{
    bool all =1;
}
service NetworkService{
    rpc Create(NetworkDefinition) returns (Network){}
    rpc List(NetworkListRequest) returns (NetworkList){}
    rpc Inspect(Reference) returns (Network) {}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
}

// safescale host create host1 --net="net1" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" --public=true
// safescale host list
// safescale host inspect host1
// safescale host create host2 --net="net1" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" --public=false


message HostSizing{
    int32 min_cpu_count = 1;
    int32 max_cpu_count = 2;
    float min_ram_size = 3;
    float max_ram_size = 4;
    int32 min_disk_size = 5;
    int32 gpu_count = 6;
    float min_cpu_freq = 7;
}

message HostDefinition{
    string name = 2;
    string network = 3;
    int32 cpu_count = 4;    // Deprecated: replaced by sizing field
    float ram = 6;          // Deprecated: replaced by sizing field
    int32 disk = 7;         // Deprecated: replaced by sizing field
    string image_id = 9;
    bool public = 10;
    int32 gpu_count = 11;   // Deprecated: replaced by sizing field
    float cpu_freq = 12;    // Deprecated: replaced by sizing field
    bool force = 13;
    HostSizing sizing = 14;
}

enum NetworkState {
    UNKNOWNSTATE = 0;
    PHASE1 = 1;
    PHASE2 = 2;
    READY = 3;
    NETWORKERROR = 4;
}

enum HostState {
    /*STOPPED host is stopped*/
	STOPPED = 0;
	/*STARTING host is starting*/
    STARTING = 1;
	/*STARTED host is started*/
	STARTED = 2;
	/*STOPPING host is stopping*/
	STOPPING = 3;
	/*ERROR host is in error state*/
	ERROR = 4;
    /*UNKNOWN is unknown*/
    UNKNOWN = 5;
}

message Host{
    string id = 1;
    string name = 2;
    int32 cpu = 3;
    float ram = 4;
    int32 disk = 5;
    string public_ip = 6;
    string private_ip = 7;
    HostState state = 8;
    string private_key = 9;
    string gateway_id = 10;
    string os_kind = 11;
    repeated string attached_volume_names = 12;
    string password = 13;
}

message HostStatus {
    string name = 1;
    string status = 2;
}

message HostList{
    repeated Host hosts= 1;
}

message SshConfig{
    string user = 1;
    string host = 2;
    string private_key = 3;
    int32 port = 4;
    SshConfig gateway = 5;
}

message HostListRequest{
    bool all = 1;
}

service HostService{
    rpc Create(HostDefinition) returns (Host){}
    rpc Inspect(Reference) returns (Host){}
    rpc Status(Reference) returns (HostStatus){}
    rpc List(HostListRequest) returns (HostList){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc Start(Reference) returns (google.protobuf.Empty){}
    rpc Stop(Reference) returns (google.protobuf.Empty){}
    rpc Reboot(Reference) returns (google.protobuf.Empty){}
    rpc Resize(HostDefinition) returns (Host){}
    rpc SSH(Reference) returns (SshConfig){}
}

message HostTemplate{
    string id = 1;
    string name = 2;
    int32 cores = 3;
    int32 ram = 4;
    int32 disk = 5;
    int32 gpu_count = 6;
    string gpu_type = 7;
}

message TemplateList{
    repeated HostTemplate templates = 1;
}

message TemplateListRequest{
    bool all = 1;
}

service TemplateService{
    rpc List(TemplateListRequest) returns (TemplateList){}
}

// safescale volume create v1 --speed="SSD" --size=2000 (par default HDD, possible SSD, HDD, COLD)
// safescale volume attach v1 host1 --path="/shared/data" --format="xfs" (par default /shared/v1 et ext4)
// safescale volume detach v1
// safescale volume delete v1
// safescale volume inspect v1
// safescale volume update v1 --speed="HDD" --size=1000

enum VolumeSpeed{
    COLD = 0;
    HDD = 1;
    SSD = 2;
}

message VolumeDefinition{
    string name = 2;
    VolumeSpeed speed = 3;
    int32 size = 4;
}

message Volume{
    string id = 1;
    string name = 2;
    VolumeSpeed speed = 3;
    int32 size = 4;
}
//message VolumeInfo{
//    Volume volume = 1;
//    VolumeAttachment attachment = 2;
//
//}

message VolumeInfo{
    string id = 1;
    string name = 2;
    VolumeSpeed speed = 3;
    int32 size = 4;
    Reference host = 5;
    string mount_path = 6;
    string format = 7;
    string device = 8;
}

message VolumeListRequest{
    bool all = 1;
}

message VolumeList{
    repeated Volume volumes = 1;
}

message VolumeAttachment{
    Reference volume = 2;
    Reference host = 3;
    string mount_path = 4;
    string format = 5;
    string device = 6;
    bool do_not_format = 7;
}

message VolumeDetachment{
    Reference volume = 1;
    Reference host = 2;
}

service VolumeService{
    rpc Create(VolumeDefinition) returns (Volume) {}
    rpc Attach(VolumeAttachment) returns (google.protobuf.Empty) {}
    rpc Detach(VolumeDetachment) returns (google.protobuf.Empty){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc List(VolumeListRequest) returns (VolumeList) {}
    rpc Inspect(Reference) returns (VolumeInfo){}
}

// safescale bucket|container create c1
// safescale bucket|container mount c1 host1 --path="/shared/data" (utilisation de s3ql, par default /containers/c1)
// safescale bucket|container umount c1 host1
// safescale bucket|container delete c1
// safescale bucket|container list
// safescale bucket|container inspect C1

message Bucket{
    string name = 1;
}

message BucketList{
    repeated Bucket buckets = 1;
}

message BucketMountingPoint{
    string bucket = 1;
    Reference host = 2;
    string path = 3;
}

service BucketService{
    rpc Create(Bucket) returns (google.protobuf.Empty){}
    rpc Mount(BucketMountingPoint) returns (google.protobuf.Empty){}
    rpc Unmount(BucketMountingPoint) returns (google.protobuf.Empty){}
    rpc Delete(Bucket) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (BucketList){}
    rpc Inspect(Bucket) returns (BucketMountingPoint){}
}

message SshCommand{
    Reference host = 1;
    string command = 2;
}
message SshCopyCommand{
    string source = 1;
    string destination = 2;
}

message SshResponse{
    string output_std = 1;
    string output_err = 2;
    int32 status = 3;
}

service SshService{
    rpc Run(SshCommand) returns (SshResponse){}
    rpc Copy(SshCopyCommand) returns (SshResponse){}
}

// safescale nas|share create share1 host1 --path="/shared/data"
// safescale nas|share delete share1
// safescale nas|share mount share1 host2 --path="/data"
// safescale nas|share umount share1 host2
// safescale nas|share list
// safescale nas|share inspect share1

message ExportOptions{
    bool read_only = 1;
    bool root_squash = 2;
    bool secure = 3;
    bool async = 4;
    bool no_hide = 5;
    bool cross_mount = 6;
    bool subtree_check = 7;
}

message ShareDefinition{
    string id = 1;
    string name = 2;
    Reference host = 3;
    string path = 4;
    string type = 5;
    ExportOptions options = 6;
    repeated string security_modes = 7;
}

message ShareList{
    repeated ShareDefinition share_list = 1;
}

message ShareMountDefinition{
    Reference host = 1;
    Reference share = 2;
    string path = 3;
    string type = 4;
    string options = 5;
    bool with_cache = 6;
}

message ShareMountList{
    ShareDefinition share = 1;
    repeated ShareMountDefinition mount_list = 2;
}

service ShareService{
    rpc Create(ShareDefinition) returns (ShareDefinition){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (ShareList){}
    rpc Mount(ShareMountDefinition) returns (ShareMountDefinition){}
    rpc Unmount(ShareMountDefinition) returns (google.protobuf.Empty){}
    rpc Inspect(Reference) returns (ShareMountList){}
}


message JobDefinition{
    string uuid = 1;
    string info = 2;
}

message JobList{
    repeated JobDefinition list = 1;
}

service JobService{
    rpc Stop(JobDefinition) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (JobList){}
}
