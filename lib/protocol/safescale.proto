/*
 * Copyright 2018-2020, CS Systemes d'Information, http://www.c-s.fr
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package safescale_protocol;
option go_package = "protocol";

import "github.com/golang/protobuf/ptypes/empty/empty.proto";
import "google/protobuf/timestamp.proto";


// Common

message Reference {
    string tenant_id = 1;
    string id = 2;
    string name = 3;
}

// Client Requests

message ClientID {
    string hostname = 1;
    string userid = 2;
    string process_id = 3;
    string parent_process_id = 4;

}

message ClientRequest {
    ClientID client_id = 1;
    google.protobuf.Timestamp timestamp = 2;
}

// Tenant requests

message Tenant {
    string name = 1;
    string provider = 2;
}

message TenantList {
    repeated Tenant tenants = 1;
}

message TenantName {
    string name = 1;
}

message TenantCleanupRequest {
    string name = 1;
    bool force = 2;
}

// VPL: not used ?
// message TenantNameList{
//     repeated string names = 1;
// }

service TenantService{
    rpc List (google.protobuf.Empty) returns (TenantList){}
    rpc Cleanup (TenantCleanupRequest) returns (google.protobuf.Empty){}
    rpc Get (google.protobuf.Empty) returns (TenantName){}
    rpc Scan (google.protobuf.Empty) returns (google.protobuf.Empty){}
    rpc Set (TenantName) returns (google.protobuf.Empty){}
}

// Image

message Image{
    string id = 1;
    string name = 2;
}

message ImageList{
    repeated Image images= 1;
}

message ImageListRequest{
    bool all = 1;
}

service ImageService{
    rpc List(ImageListRequest) returns (ImageList){}
}


// safescale network create net1 --cidr="192.145.0.0/16" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" (par défault "192.168.0.0/24", on crée une gateway sur chaque réseau: gw_net1)
// safescale network list
// safescale network delete net1
// safescale network inspect net1

message VirtualIp {
    string id = 1;
    string name = 2;
    string network_id = 3;
    string private_ip = 4;
    string public_ip = 5;
    repeated Host hosts = 6;
}

message NetworkDefinition{
    string name = 2;
    string cidr = 3;
    GatewayDefinition gateway = 4;
    bool fail_over = 5;
}

message GatewayDefinition{
    int32 cpu = 1;  // Deprecated: replaced by sizing field
    float ram = 2;  // Deprecated: replaced by sizing field
    int32 disk = 3; // Deprecated: replaced by sizing field
    string image_id = 5;
    string name = 6;
    int32 gpu_count = 7;    // Deprecated: replaced by sizing field
    string gpu_type = 8;    // Deprecated: replaced by sizing field
    HostSizing sizing = 9;  // Deprecated: replaced by sizing_as_string field
    string sizing_as_string = 10;
}

message Network{
    string id = 1;
    string name = 2;
    string cidr = 3;
    string gateway_id = 4;
    string secondary_gateway_id = 5;
    VirtualIp virtual_ip = 6;
    bool failover = 7;
    NetworkState state = 8;
}

message NetworkList{
    repeated Network networks = 1;
}

message NetworkListRequest{
    bool all =1;
}
service NetworkService{
    rpc Create(NetworkDefinition) returns (Network){}
    rpc List(NetworkListRequest) returns (NetworkList){}
    rpc Inspect(Reference) returns (Network) {}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
}

// safescale host create host1 --net="net1" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" --public=true
// safescale host list
// safescale host inspect host1
// safescale host create host2 --net="net1" --cpu=2 --ram=7 --disk=100 --os="Ubuntu 16.04" --public=false


message HostSizing{
    int32 min_cpu_count = 1;
    int32 max_cpu_count = 2;
    float min_ram_size = 3;
    float max_ram_size = 4;
    int32 min_disk_size = 5;
    int32 gpu_count = 6;
    float min_cpu_freq = 7;
}

message HostDefinition{
    string name = 2;
    string network = 3;
    int32 cpu_count = 4;    // Deprecated: replaced by sizing field
    float ram = 6;          // Deprecated: replaced by sizing field
    int32 disk = 7;         // Deprecated: replaced by sizing field
    string image_id = 9;
    bool public = 10;
    int32 gpu_count = 11;   // Deprecated: replaced by sizing field
    float cpu_freq = 12;    // Deprecated: replaced by sizing field
    bool force = 13;
    HostSizing sizing = 14; // Deprecated: replace by sizing_as_string field
    string sizing_as_string = 15;
}

enum NetworkState {
    NS_UNKNOWNSTATE = 0;
    NS_PHASE1 = 1;
    NS_PHASE2 = 2;
    NS_READY = 3;
    NS_NETWORKERROR = 4;
}

enum HostState {
    /*STOPPED host is stopped*/
	HS_STOPPED = 0;
	/*STARTING host is starting*/
    HS_STARTING = 1;
	/*STARTED host is started*/
	HS_STARTED = 2;
	/*STOPPING host is stopping*/
	HS_STOPPING = 3;
	/*ERROR host is in error state*/
    HS_ERROR = 4;
    /*TERMINATED host is terminated (in AWS, it's like DELETED)*/
    HS_TERMINATED = 5;
    /*UNKNOWN is unknown*/
    HS_UNKNOWN = 6;

}

message Host{
    string id = 1;
    string name = 2;
    int32 cpu = 3;
    float ram = 4;
    int32 disk = 5;
    string public_ip = 6;
    string private_ip = 7;
    HostState state = 8;
    string private_key = 9;
    string gateway_id = 10;
    string os_kind = 11;
    repeated string attached_volume_names = 12;
    string password = 13;
}

message HostStatus {
    string name = 1;
    string status = 2;
}

message HostList{
    repeated Host hosts = 1;
}

message SshConfig{
    string user = 1;
    string host = 2;
    string private_key = 3;
    int32 port = 4;
    SshConfig gateway = 5;
    SshConfig secondary_gateway = 6;
}

message HostListRequest{
    bool all = 1;
}

service HostService{
    rpc Create(HostDefinition) returns (Host){}
    rpc Inspect(Reference) returns (Host){}
    rpc Status(Reference) returns (HostStatus){}
    rpc List(HostListRequest) returns (HostList){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc Start(Reference) returns (google.protobuf.Empty){}
    rpc Stop(Reference) returns (google.protobuf.Empty){}
    rpc Reboot(Reference) returns (google.protobuf.Empty){}
    rpc Resize(HostDefinition) returns (Host){}
    rpc SSH(Reference) returns (SshConfig){}
}

message HostTemplate{
    string id = 1;
    string name = 2;
    int32 cores = 3;
    int32 ram = 4;
    int32 disk = 5;
    int32 gpu_count = 6;
    string gpu_type = 7;
}

message TemplateList{
    repeated HostTemplate templates = 1;
}

message TemplateListRequest{
    bool all = 1;
}

service TemplateService{
    rpc List(TemplateListRequest) returns (TemplateList){}
}

// safescale volume create v1 --speed="SSD" --size=2000 (par default HDD, possible SSD, HDD, COLD)
// safescale volume attach v1 host1 --path="/shared/data" --format="xfs" (par default /shared/v1 et ext4)
// safescale volume detach v1
// safescale volume delete v1
// safescale volume inspect v1
// safescale volume update v1 --speed="HDD" --size=1000

enum VolumeSpeed {
    VS_COLD = 0;
    VS_HDD = 1;
    VS_SSD = 2;
}

message VolumeCreateRequest {
    string name = 2;
    VolumeSpeed speed = 3;
    int32 size = 4;
}

// message VolumeCreateResponse {
//     string id = 1;
//     string name = 2;
//     VolumeSpeed speed = 3;
//     int32 size = 4;
// }

message VolumeDetachmentRequest {
    Reference volume = 1;
    Reference host = 2;
}

message VolumeInspectResponse {
    string id = 1;
    string name = 2;
    VolumeSpeed speed = 3;
    int32 size = 4;
    Reference host = 5; // Deprecated: replaced by attachments field
    string mount_path = 6; // Deprecated: replaced by attachments field
    string format = 7; // Deprecated: replaced by attachments field
    string device = 8; // Deprecated: replaced by attachments field
    repeated VolumeAttachmentResponse attachments = 10;
}

message VolumeAttachmentRequest {
    Reference volume = 2;
    Reference host = 3;
    string mount_path = 4;
    string format = 5;
    string device = 6;
    bool do_not_format = 7;
}

message VolumeAttachmentResponse {
    Reference host = 1;
    string mount_path = 2;
    string format = 3;
    string device = 4;
    bool do_not_format = 5;
}

message VolumeListRequest{
    bool all = 1;
}

message VolumeListResponse {
    repeated VolumeInspectResponse volumes = 1;
}

service VolumeService{
    rpc Create(VolumeCreateRequest) returns (VolumeInspectResponse) {}
    rpc Attach(VolumeAttachmentRequest) returns (google.protobuf.Empty) {}
    rpc Detach(VolumeDetachmentRequest) returns (google.protobuf.Empty){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc List(VolumeListRequest) returns (VolumeListResponse) {}
    rpc Inspect(Reference) returns (VolumeInspectResponse){}
}

// safescale bucket|container create c1
// safescale bucket|container mount c1 host1 --path="/shared/data" (utilisation de s3ql, par default /containers/c1)
// safescale bucket|container umount c1 host1
// safescale bucket|container delete c1
// safescale bucket|container list
// safescale bucket|container inspect C1

message Bucket{
    string name = 1;
}

message BucketList{
    repeated Bucket buckets = 1;
}

message BucketMountingPoint{
    string bucket = 1;
    Reference host = 2;
    string path = 3;
}

service BucketService{
    rpc Create(Bucket) returns (google.protobuf.Empty){}
    rpc Mount(BucketMountingPoint) returns (google.protobuf.Empty){}
    rpc Unmount(BucketMountingPoint) returns (google.protobuf.Empty){}
    rpc Delete(Bucket) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (BucketList){}
    rpc Inspect(Bucket) returns (BucketMountingPoint){}
}

// SSH requests

message SshCommand{
    Reference host = 1;
    string command = 2;
}

message SshCopyCommand{
    string source = 1;
    string destination = 2;
    string owner = 3;
    string mode = 4;
}

message SshResponse{
    string output_std = 1;
    string output_err = 2;
    int32 status = 3;
}

service SshService{
    rpc Run(SshCommand) returns (SshResponse){}
    rpc Copy(SshCopyCommand) returns (SshResponse){}
}

// safescale nas|share create share1 host1 --path="/shared/data"
// safescale nas|share delete share1
// safescale nas|share mount share1 host2 --path="/data"
// safescale nas|share umount share1 host2
// safescale nas|share list
// safescale nas|share inspect share1

message NFSExportOptions{
    bool read_only = 1;
    bool root_squash = 2;
    bool secure = 3;
    bool async = 4;
    bool no_hide = 5;
    bool cross_mount = 6;
    bool subtree_check = 7;
}

message ShareDefinition{
    string id = 1;
    string name = 2;
    Reference host = 3;
    string path = 4;
    string type = 5;
    NFSExportOptions options = 6;  // Deprecated: replaced by field options_as_string to be Network FileSystem agnostic
    repeated string security_modes = 7;
    string options_as_string = 8;
}

message ShareList{
    repeated ShareDefinition share_list = 1;
}

message ShareMountDefinition{
    Reference host = 1;
    Reference share = 2;
    string path = 3;
    string type = 4;
    string options = 5;
    bool with_cache = 6;
}

message ShareMountList{
    ShareDefinition share = 1;
    repeated ShareMountDefinition mount_list = 2;
}

service ShareService{
    rpc Create(ShareDefinition) returns (ShareDefinition){}
    rpc Delete(Reference) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (ShareList){}
    rpc Mount(ShareMountDefinition) returns (ShareMountDefinition){}
    rpc Unmount(ShareMountDefinition) returns (google.protobuf.Empty){}
    rpc Inspect(Reference) returns (ShareMountList){}
}

// Job Management

message JobDefinition{
    string uuid = 1;
    string info = 2;
}

message JobList{
    repeated JobDefinition list = 1;
}

service JobService{
    rpc Stop(JobDefinition) returns (google.protobuf.Empty){}
    rpc List(google.protobuf.Empty) returns (JobList){}
}

// Cluster services

enum ClusterState {
	CS_UNKNOWN = 0;
	CS_NOMINAL = 1;
	CS_DEGRADED = 2;
	CS_STOPPED = 3;
	CS_INITIALIZING = 4;
	CS_CREATED = 5;
	CS_CREATING = 6;
	CS_ERROR = 7;
	CS_REMOVED = 8;
	CS_STOPPING = 9;
	CS_STARTING = 10;
}

message ClusterStateResponse {
    ClusterState state = 1;
}

enum ClusterComplexity {
    CC_UNKNOWN = 0;
    CC_SMALL = 1;
    CC_NORMAL = 2;
    CC_LARGE = 3;
}

enum ClusterFlavor {
    CF_UNKNOWN = 0;
    CF_BOH = 1;
    CF_K8S = 2;
}

enum ClusterResizeAction {
    CRA_UNKNOWN = 0;
    CRA_EXPAND = 1;
    CRA_SHRINK = 2;
}

message ClusterListResponse {
    repeated ClusterResponse clusters = 1;
}

message ClusterCreateRequest {
    string name = 1;
    ClusterComplexity complexity = 2;
    ClusterFlavor flavor = 3;
    bool keep_on_failure = 4;
    string cidr = 5;
    repeated string disabled = 6;
    string os = 7;
    string global_sizing = 8;
    string gateway_sizing = 9;
    string master_sizing = 10;
    string node_sizing = 11;
}

message ClusterResizeRequest {
    string name = 1;
    int32 count = 2;
    string node_sizing = 3;
    string image_id = 4;
    ClusterResizeAction action = 5;
    bool dry_run = 6;
}

message ClusterDeleteRequest  {
    string name = 1;
    bool force = 2;     // if true, force cluster deletion no matter what
}

message ClusterIdentity {
    string name = 1;
    ClusterComplexity complexity = 2;
    ClusterFlavor flavor = 3;
    SshConfig ssh_config = 4;
    string admin_password = 5;
}

message ClusterResponse {
    ClusterIdentity identity = 1;
    repeated string properties = 2;
}

message ClusterNodeListResponse {
    repeated Host nodes = 1;
}

message ClusterNodeRequest {
    string cluster_name = 1;
    Reference host = 2;     // on deletion, if not set, requests to delete last added node
}

service ClusterService{
    rpc List(google.protobuf.Empty) returns (ClusterListResponse){}
    rpc Inspect(Reference) returns (ClusterResponse){}
    rpc Create(ClusterCreateRequest) returns (ClusterResponse){}
    rpc Delete(ClusterDeleteRequest) returns (google.protobuf.Empty){}
    rpc Start(Reference) returns (google.protobuf.Empty){}
    rpc Stop(Reference) returns (google.protobuf.Empty){}
    rpc State(Reference) returns (ClusterStateResponse){}
    rpc Expand(ClusterResizeRequest) returns (ClusterNodeListResponse){}
    rpc Shrink(ClusterResizeRequest) returns (ClusterNodeListResponse){}
    rpc ListNodes(Reference) returns (ClusterNodeListResponse){}
    rpc InspectNode(ClusterNodeRequest) returns (Host){}
    rpc DeleteNode(ClusterNodeRequest) returns (google.protobuf.Empty){}
    rpc StopNode(ClusterNodeRequest) returns (google.protobuf.Empty){}
    rpc StartNode(ClusterNodeRequest) returns (google.protobuf.Empty){}
    rpc StateNode(ClusterNodeRequest) returns (google.protobuf.Empty){}
    rpc ListMasters(Reference) returns (ClusterNodeListResponse){}
    rpc InspectMaster(ClusterNodeRequest) returns (Host){}
}

// Feature services

enum FeatureTargetType {
    FT_ALL = 0;
    FT_HOST = 1;
    FT_CLUSTER = 2;
}

message FeatureListRequest {
    FeatureTargetType target_type = 1;
    Reference target_ref = 2;
    bool installed_only = 3;
}

message FeatureResponse {
    string name = 1;
}

message FeatureListResponse {
    repeated FeatureResponse features = 1;
}

enum FeatureAction {
    FA_CHECK = 0;
    FA_ADD = 1;
    FA_REMOVE = 2;
}

message FeatureSettings {
    bool skip_proxy = 1;
    bool serialize = 2;
    bool ignore_feature_requirements = 3;
    bool ignore_sizing_requirements = 4;
    bool add_unconditionally = 5;
}

message FeatureActionRequest {
    FeatureAction action = 1;
    FeatureTargetType target_type = 2;
    Reference target_ref = 3;
    map<string, string> variables = 4;
    FeatureSettings settings = 5;
}

service FeatureService {
    rpc List(FeatureListRequest) returns (FeatureListResponse){}
    rpc Check(FeatureActionRequest) returns (google.protobuf.Empty){}
    rpc Add(FeatureActionRequest) returns (google.protobuf.Empty){}
    rpc Remove(FeatureActionRequest) returns (google.protobuf.Empty){}
}