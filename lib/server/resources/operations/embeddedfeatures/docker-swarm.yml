#
# Copyright 2018-2021, CS Systemes d'Information, http://csgroup.eu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
feature:
    suitableFor:
        host: yes
        cluster: all

    requirements:
        features:
            - docker

    install:
        bash:
            check:
                pace: state
                steps:
                    state:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: all
                            nodes: all
                        run: |
                            sfIsDockerSwarmInit || sfFail 192
                            sfExit

            add:
                pace: init,join-managers,join-workers
                steps:
                    init:
                        targets:
                            hosts: yes
                            gateways: no
                            masters: one
                            nodes: no
                        run: |
                            sfIsDockerSwarmInit || {
                                docker swarm init || sfFail 192
                            }

                            # generate token to join managers to swarm
                            MANAGER_TOKEN=$(docker swarm join-token manager --quiet)
                            [ $? -ne 0 ] && sfFail 193 "failed to generate token to add manager to swarm"

                            # generate token to join workers to swarm
                            WORKER_TOKEN=$(docker swarm join-token worker --quiet)
                            [ $? -ne 0 ] && sfFail 194 "failed to generate token to add worker to swarm"

                            # create share data for managers to join
                            echo "$MANAGER_TOKEN" >${SF_TMPDIR}/docker-swarm.manager.token
                            sfDropzonePush ${SF_TMPDIR}/docker-swarm.manager.token || sfFail 195
                            rm -f ${SF_TMPDIR}/docker-swarm.manager.token

                            # create shared data for workers to join
                            echo "$WORKER_TOKEN" >${SF_TMPDIR}/docker-swarm.worker.token
                            sfDropzonePush ${SF_TMPDIR}/docker-swarm.worker.token || sfFail 196
                            rm -f ${SF_TMPDIR}/docker-swarm.worker.token

                            # create shared data for managers and workers to join
                            echo "{{ .HostIP }}" >${SF_TMPDIR}/docker-swarm.manager.first
                            sfDropzonePush ${SF_TMPDIR}/docker-swarm.manager.first || sfFail 197
                            rm -f ${SF_TMPDIR}/docker-swarm.manager.first

                            for ip in {{ range .ClusterMasterIPs }}{{.}} {{end}} {{ range .ClusterNodeIPs }}{{.}} {{end}}; do
                                [ "$ip" = "{{.HostIP}}" ] && continue
                                sfDropzoneSync $ip || sfFail 198
                            done
                            sfDropzoneSync {{ .PrimaryGatewayIP }} || sfFail 198
                            {{ if .SecondaryGatewayIP }}
                            sfDropzoneSync {{ .SecondaryGatewayIP }} || sfFail 198
                            {{end}}

                            rm ${SF_TMPDIR}/docker-swarm.worker.token
                            sfDropzoneClean
                            sfExit

                    join-managers:
                        targets:
                            hosts: yes
                            gateways: no
                            masters: all
                            nodes: no
                        run: |
                            sfIsDockerSwarmInit || {
                                sfDropzonePop ${SF_TMPDIR} || sfFail 200
                                sfDropzoneClean

                                [ ! -f ${SF_TMPDIR}/docker-swarm.manager.first ] && {
                                    rm -f ${SF_TMPDIR}/docker-swarm.*
                                    sfFail 201
                                }
                                [ ! -f ${SF_TMPDIR}/docker-swarm.manager.token ] && {
                                    rm -f ${SF_TMPDIR}/docker-swarm.*
                                    sfFail 202
                                }

                                FIRST_MANAGER=$(cat ${SF_TMPDIR}/docker-swarm.manager.first)
                                [ "$FIRST_MANAGER" != "{{ .HostIP }}" ] && {
                                    TOKEN=$(cat ${SF_TMPDIR}/docker-swarm.manager.token)
                                    rm -f ${SF_TMPDIR}/docker-swarm.*

                                    docker swarm join --token $TOKEN ${FIRST_MANAGER}:2377 || sfFail 203
                                }
                            }
                            sfExit

                    join-workers:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: no
                            nodes: all
                        run: |
                            sfIsDockerSwarmInit || {
                                sfDropzonePop ${SF_TMPDIR} || sfFail 204
                                sfDropzoneClean

                                [ ! -f ${SF_TMPDIR}/docker-swarm.manager.first ] && {
                                    rm -f ${SF_TMPDIR}/docker-swarm.*
                                    sfFail 205
                                }
                                [ ! -f ${SF_TMPDIR}/docker-swarm.worker.token ] && {
                                    rm -f ${SF_TMPDIR}/docker-swarm.*
                                    sfFail 206
                                }

                                FIRST_MANAGER=$(cat ${SF_TMPDIR}/docker-swarm.manager.first)
                                TOKEN=$(cat ${SF_TMPDIR}/docker-swarm.worker.token)
                                rm -f ${SF_TMPDIR}/docker-swarm.*

                                docker swarm join --token $TOKEN ${FIRST_MANAGER}:2377 || sfFail 207
                            }
                            sfExit

            remove:
                pace: workers,managers
                steps:
                    workers:
                        targets:
                            hosts: no
                            gateways: all
                            masters: no
                            nodes: all
                        run: |
                            sfIsDockerSwarmInit && {
                                docker swarm leave || sfExit 192
                            }
                            sfExit

                    managers:
                        targets:
                            hosts: yes
                            gateways: no
                            masters: all
                            nodes: no
                        run: |
                            sfIsDockerSwarmInit && {
                                docker swarm leave --force || sfExit 193
                            }
                            sfExit

...
