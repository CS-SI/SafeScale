#
# Copyright 2018-2021, CS Systemes d'Information, http://www.c-s.fr
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
feature:
    suitableFor:
        host: yes
        cluster: all

    parameters:
        - DockerComposeVersion=1.27.4

    install:
        bash:
            check:
                pace: pkg
                steps:
                    pkg:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: all
                            nodes: all
                        run: |
                            case $LINUX_KIND in
                                debian|ubuntu)
                                    dpkg -l | grep docker-ce &>/dev/null || sfFail 194
                                    docker ps &>/dev/null || sfFail 1 "Docker daemon not running"
                                    ;;
                                centos|redhat|rhel)
                                    rpm -qa | grep docker-ce &>/dev/null || sfFail 194
                                    docker ps &>/dev/null || sfFail 1 "Docker daemon not running"
                                    ;;
                                fedora)
                                    rpm -qa | grep docker-ce &>/dev/null || sfFail 194
                                    docker ps &>/dev/null || sfFail 1 "Docker daemon not running"
                                    ;;
                                *)
                                    echo "Unsupported operating system '$LINUX_KIND'"
                                    sfFail 195
                                    ;;
                            esac

            add:
                pace: docker-ce,docker-compose,config,firewall,ready
                steps:
                    docker-ce:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: all
                            nodes: all
                        run: |
                            case $LINUX_KIND in
                                debian|ubuntu)
                                    export DEBIAN_FRONTEND=noninteractive
                                    sfStandardRetry "sfApt update"
                                    sfStandardRetry "sfApt install -y gnupg2 || sfApt install -y gnupg"
                                    sfStandardRetry "sfApt install -y apt-transport-https ca-certificates curl software-properties-common" || sfFail 192
                                    sfStandardRetry "curl -fsSL https://download.docker.com/linux/$LINUX_KIND/gpg | apt-key add -" || sfFail 193
                                    echo "deb [arch=amd64] https://download.docker.com/linux/$LINUX_KIND $(lsb_release -cs) stable" >/etc/apt/sources.list.d/docker.list
                                    sfStandardRetry "sfApt update"
                                    sfStandardRetry "sfApt install -qqy docker-ce" || sfFail 194
                                    ;;
                                centos|redhat|rhel)
                                    sfRetry $(sfLongTimeout) $(sfDefaultDelay) "yum install -y yum-utils device-mapper-persistent-data lvm2" || sfFail 195
                                    sfRetry $(sfLongTimeout) $(sfDefaultDelay) "yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo" || sfFail 196
                                    kop=0
                                    op=-1
                                    yum install -y curl --nobest &>/dev/null && op=$? || true
                                    if [ $op -ne 0 ]; then
                                        sfRetry $(sfLongTimeout) $(sfDefaultDelay) "yum install -y curl &>/dev/null" && op=$? || true
                                        if [ $op -ne 0 ]; then
                                            sfFail 197
                                        else
                                            sfRetry $(sfLongTimeout) $(sfDefaultDelay) "yum install -y docker-ce" || sfFail 198
                                        fi
                                    else
                                        sfRetry $(sfLongTimeout) $(sfDefaultDelay) "yum install -y docker-ce --nobest" || sfFail 199
                                    fi
                                    cat /etc/redhat-release | grep 8. && systemctl enable --now docker || true
                                    ;;
                                fedora)
                                    sfRetry $(sfLongTimeout) $(sfDefaultDelay) "dnf install -y yum-utils device-mapper-persistent-data lvm2" || sfFail 200
                                    sfRetry $(sfLongTimeout) $(sfDefaultDelay) "dnf config-manager --add-repo=https://download.docker.com/linux/fedora/docker-ce.repo"
                                    kop=0
                                    op=-1
                                    dnf install -y curl --nobest &>/dev/null && op=$? || true
                                    if [ $op -ne 0 ]; then
                                        dnf install -y curl &>/dev/null && op=$? || true
                                        if [ $op -ne 0 ]; then
                                            sfFail 201
                                        else
                                            sfRetry $(sfLongTimeout) $(sfDefaultDelay) "dnf install -y docker-ce" || sfFail 202
                                        fi
                                    else
                                        sfRetry $(sfLongTimeout) $(sfDefaultDelay) "dnf install -y docker-ce --nobest" || sfFail 203
                                    fi
                                    systemctl enable --now docker || true
                                    ;;
                                *)
                                    echo "Unsupported operating system '$LINUX_KIND'"
                                    sfFail 197
                                    ;;
                            esac
                            sfExit

                    docker-compose:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: all
                            nodes: all
                        run: |
                            op=-1
                            VERSION="{{.DockerComposeVersion}}"
                            if [[ "latest" = "${VERSION}" ]]; then
                                VERSION=$(sfStandardRetry "curl -kSsL https://api.github.com/repos/docker/compose/releases/{{.DockerComposeVersion}} | jq -r .name") && op=$? || true
                                [ $op -ne 0 ] && sfFail 204
                            fi
                            URL="https://github.com/docker/compose/releases/download/${VERSION}/docker-compose-$(uname -s)-$(uname -m)"
                            sfDownload "$URL" docker-compose 3m 5 || sfFail 205
                            chmod +x docker-compose && mv docker-compose /usr/bin
                            sfExit

                    config:
                        targets:
                            hosts: yes
                            gateways: all
                            masters: all
                            nodes: all
                        run: |
                            mkdir -p /etc/docker
                            if [ "$(sfGetFact use_systemd)" = "1" ]; then
                                DRIVER=systemd
                            else
                                DRIVER=cgroupfs
                            fi
                            if [ "$(sfGetFact redhat_like)" = "1" ]; then
                                cat > /etc/docker/daemon.json <<-EOF
                            {
                                "iptables": false,
                                "exec-opts": [
                                    "native.cgroupdriver=${DRIVER}"
                                ],
                                "no-new-privileges": false,
                                "log-driver": "json-file",
                                "log-level":"info",
                                "log-opts": {
                                    "max-size": "100m"
                                },
                                "experimental": true,
                                "metrics-addr": "0.0.0.0:9323",
                                "storage-driver": "overlay2",
                                "userland-proxy": false,
                                "storage-opts": [
                                    "overlay2.override_kernel_check=true"
                                ]
                            }
                            EOF
                            else
                            # VPL: these options seems to trouble docker in some cases. Need further analysis.
                            #    "exec-opts": [
                            #        "native.cgroupdriver=${DRIVER}"
                            #    ],
                                cat > /etc/docker/daemon.json <<-EOF
                            {
                                "no-new-privileges": false,
                                "log-driver": "json-file",
                                "log-level":"info",
                                "log-opts": {
                                    "max-size": "100m"
                                },
                                "experimental": true,
                                "metrics-addr": "0.0.0.0:9323",
                                "storage-driver": "overlay2"
                            }
                            EOF
                            fi
                            sfExit

                    firewall:
                        targets:
                            gateways: all
                            hosts: yes
                            masters: all
                            nodes: all
                        run: |
                            # Makes sure firewalld is running, starting first its dependency dbus...
                            sfService start dbus
                            # then firewalld  itself
                            sfService restart firewalld

                            # If a zone named 'docker' is created and activated, we do not need to add interfaces to trusted zone
                            # FIXME: it should be better to create a configuration identical to the one created by docker 20.10+...
                            sfFirewall --info-zone=docker 2>&1 >/dev/null || {
                                sfFirewallAdd --zone=trusted --add-interface=docker0
                                sfFirewallAdd --zone=trusted --add-masquerade
                                sfFirewallReload || sfFail 206 "Firewall problem"
                            }
                            sfExit

                    ready:
                        targets:
                            gateways: all
                            hosts: yes
                            masters: all
                            nodes: all
                        run: |
                            sfService enable docker || sfFail 207
                            sfService restart docker || sfFail 208
                            op=-1
                            sfStandardRetry "sfService status docker &>/dev/null" && op=$? || true
                            [ $op -ne 0 ] && sfFail 209
                            sfExit

            remove:
                pace: cleanup
                steps:
                    cleanup:
                        targets:
                            gateways: all
                            hosts: yes
                            masters: all
                            nodes: all
                        run: |
                            sfService disable docker
                            sfService stop docker

                            sfFirewallAdd --zone=trusted --remove-interface=docker0 --remove-interface=docker_gwbridge
                            sfFirewallReload || sfFail 192 "Firewall problem"

                            case $LINUX_KIND in
                                debian|ubuntu)
                                    sfApt purge -y docker-ce*
                                    ;;
                                centos|redhat|rhel)
                                    yum remove -y docker-ce*
                                    ;;
                                fedora)
                                    dnf remove -y docker-ce*
                                    ;;
                                *)
                                    echo "Unsupported operating system '$LINUX_KIND'"
                                    sfFail 193 "Unsupported operating system '$LINUX_KIND'"
                                    ;;
                            esac
                            rm -f /usr/bin/docker-compose || true
                            sfExit

...
