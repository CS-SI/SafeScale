/*
 * Copyright 2018, CS Systemes d'Information, http://www.c-s.fr
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package aws

//go:generate rice embed-go
import (
	"bytes"
	"encoding/base64"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"github.com/CS-SI/SafeScale/lib/server/iaas/resources/enums/HostProperty"
	"github.com/CS-SI/SafeScale/lib/server/iaas/resources/enums/HostState"
	"github.com/CS-SI/SafeScale/lib/server/iaas/resources/enums/VolumeSpeed"
	"github.com/CS-SI/SafeScale/lib/server/iaas/resources/enums/VolumeState"
	"github.com/CS-SI/SafeScale/lib/server/metadata"
	"github.com/CS-SI/SafeScale/lib/system"
	s3tow "github.com/graymeta/stow/s3"
	"regexp"
	"strconv"
	"strings"
	"text/template"
	"time"

	rice "github.com/GeertJohan/go.rice"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/aws/aws-sdk-go/service/pricing"
	"github.com/aws/aws-sdk-go/service/s3"
)

// //Config AWS configurations
// type Config struct {
// 	ImageOwners    []string
// 	DefaultNetwork string
// }

//AuthOpts AWS credentials
type AuthOpts struct {
	// AWS Access key ID
	AccessKeyID string

	// AWS Secret Access Key
	SecretAccessKey string
	// The region to send requests to. This parameter is required and must
	// be configured globally or on a per-client basis unless otherwise
	// noted. A full list of regions is found in the "Regions and Endpoints"
	// document.
	//
	// @see http://docs.aws.amazon.com/general/latest/gr/rande.html
	//   AWS Regions and Endpoints
	Region string
	//Config *Config
}

// Retrieve returns nil if it successfully retrieved the value.
// Error is returned if the value were not obtainable, or empty.
func (o AuthOpts) Retrieve() (credentials.Value, error) {
	return credentials.Value{
		AccessKeyID:     o.AccessKeyID,
		SecretAccessKey: o.SecretAccessKey,
		ProviderName:    "internal",
	}, nil
}

// IsExpired returns if the credentials are no longer valid, and need
// to be retrieved.
func (o AuthOpts) IsExpired() bool {
	return false
}

// AuthenticatedClient returns an authenticated client
func AuthenticatedClient(opts AuthOpts) (*Client, error) {
	s, err := session.NewSession(&aws.Config{
		Region:      aws.String(opts.Region),
		Credentials: credentials.NewCredentials(opts),
	})
	if err != nil {
		return nil, err
	}
	sPricing, err := session.NewSession(&aws.Config{
		Region:      aws.String("us-east-1"),
		Credentials: credentials.NewCredentials(opts),
	})
	if err != nil {
		return nil, err
	}
	box, err := rice.FindBox("scripts")
	if err != nil {
		return nil, err
	}
	userDataStr, err := box.String("userdata.sh")
	if err != nil {
		return nil, err
	}
	tpl, err := template.New("user_data").Parse(userDataStr)
	if err != nil {
		return nil, err
	}
	c := Client{
		Session:     s,
		EC2:         ec2.New(s),
		Pricing:     pricing.New(sPricing),
		AuthOpts:    opts,
		UserDataTpl: tpl,
	}
	//providers.InitializeBucket(&c)
	//c.CreateContainer("gpac.aws.networks")
	//c.CreateContainer("gpac.aws.wms")
	//c.CreateContainer("gpac.aws.volumes")

	return &c, nil
}

func wrapError(msg string, err error) error {
	if err == nil {
		return nil
	}
	if aerr, ok := err.(awserr.Error); ok {
		return fmt.Errorf("%s: cause by %s", msg, aerr.Message())
	}
	return err
}

// Build build a new Client from configuration parameter
func (c *Client) Build(params map[string]interface{}) (api.ClientAPI, error) {
	tenantName, _ := params["name"].(string)

	identity, _ := params["identity"].(map[string]interface{})
	compute, _ := params["compute"].(map[string]interface{})
	network, _ := params["network"].(map[string]interface{})

	accessKeyID, _ := identity["AccessKeyID"].(string)
	secretAccessKey, _ := identity["SecretAccessKey"].(string)
	identityEndpoint, _ := identity["EndPoint"].(string)

	region, _ := compute["Region"].(string)
	defaultImage, _ := compute["DefaultImage"]

	return AuthenticatedClient(
		AuthOpts{
			AccessKeyID:     accessKeyID,
			SecretAccessKey: secretAccessKey,
			Region:          region,
		}, CfgOpts{
			DefaultImage: defaultImage,
		},
	)

}

// Client a AWS provider client
type Client struct {
	Session     *session.Session
	EC2         *ec2.EC2
	Pricing     *pricing.Pricing
	AuthOpts    AuthOpts
	UserDataTpl *template.Template
	//ImageOwners []string
}

func (c *Client) getSubnets(vpcIDs []string) ([]*ec2.Subnet, error) {
	filters := []*ec2.Filter{}
	for _, id := range vpcIDs {
		filters = append(filters, &ec2.Filter{
			Name:   aws.String("vpc-id"),
			Values: []*string{&id},
		})
	}
	out, err := c.EC2.DescribeSubnets(&ec2.DescribeSubnetsInput{
		Filters: filters,
	})
	if err != nil {
		return nil, err
	}
	return out.Subnets, nil

}



// Data structure to apply to userdata.sh template
type userData struct {
	//Name of the default user (api.DefaultUser)
	User string
	//Private key used to create the host
	Key string
	//If true activate IP frowarding
	IsGateway bool
	//If true configure default gateway
	AddGateway bool
	//Content of the /etc/resolv.conf of the Gateway
	//Used only if IsGateway is true
	ResolvConf string
	//IP of the gateway
	GatewayIP string
}

func (c *Client) prepareUserData(request model.HostRequest, kp *model.KeyPair, gw *model.Host) (string, error) {
	dataBuffer := bytes.NewBufferString("")
	var ResolvConf string
	var err error
	// if !request.PublicIP {
	// 	var buffer bytes.Buffer
	// 	for _, dns := range client.Cfg.DNSList {
	// 		buffer.WriteString(fmt.Sprintf("nameserver %s\n", dns))
	// 	}
	// 	ResoleConf = buffer.String()
	// }
	ip := ""
	if gw != nil {
		hpNetworkV1 := propsv1.NewHostNetwork()
		err := gw.Properties.Get(HostProperty.NetworkV1, hpNetworkV1)
		if err != nil {
			return "", err
		}
		ip = hpNetworkV1.IPv4Addresses[hpNetworkV1.DefaultNetworkID]
		if ip == "" {
			ip = hpNetworkV1.IPv6Addresses[hpNetworkV1.DefaultNetworkID]
		}
	}
	data := userData{
		User:       model.DefaultUser,
		Key:        strings.Trim(kp.PublicKey, "\n"),
		IsGateway:  request.IsGateway,
		AddGateway: !request.PublicIP,
		ResolvConf: ResolvConf,
		GatewayIP:  ip,
	}
	err = c.UserDataTpl.Execute(dataBuffer, data)
	if err != nil {
		return "", err
	}
	encBuffer := bytes.Buffer{}
	enc := base64.NewEncoder(base64.StdEncoding, &encBuffer)
	enc.Write(dataBuffer.Bytes())
	return encBuffer.String(), nil
}

func (c *Client) saveHost(host model.Host) error {
	var buffer bytes.Buffer
	enc := gob.NewEncoder(&buffer)
	err := enc.Encode(host)
	if err != nil {
		return err
	}
	return c.PutObject("gpac.aws.wms", model.Object{
		Name:    host.ID,
		Content: bytes.NewReader(buffer.Bytes()),
	})
}
func (c *Client) removeHost(hostID string) error {
	return c.DeleteObject("gpac.aws.wms", hostID)
}
func (c *Client) readHost(hostID string) (*model.Host, error) {
	o, err := c.GetObject("gpac.aws.wms", hostID, nil)
	if err != nil {
		return nil, err
	}
	var buffer bytes.Buffer
	buffer.ReadFrom(o.Content)
	enc := gob.NewDecoder(&buffer)
	var host model.Host
	err = enc.Decode(&host)
	if err != nil {
		return nil, err
	}
	return &host, nil
}

func (c *Client) createSecurityGroup(vpcID string, name string) (string, error) {
	out, err := c.EC2.CreateSecurityGroup(&ec2.CreateSecurityGroupInput{
		GroupName: aws.String(name),
		VpcId:     aws.String(vpcID),
	})
	if err != nil {
		return "", err
	}
	_, err = c.EC2.AuthorizeSecurityGroupEgress(&ec2.AuthorizeSecurityGroupEgressInput{
		IpPermissions: []*ec2.IpPermission{
			&ec2.IpPermission{
				IpProtocol: aws.String("-1"),
			},
		},
	})
	if err != nil {
		return "", err
	}

	_, err = c.EC2.AuthorizeSecurityGroupIngress(&ec2.AuthorizeSecurityGroupIngressInput{
		IpPermissions: []*ec2.IpPermission{
			&ec2.IpPermission{
				IpProtocol: aws.String("-1"),
			},
		},
	})
	if err != nil {
		return "", err
	}
	return *out.GroupId, nil
}


// GetHost returns the host identified by id
func (c *Client) GetHost(hostParam interface{}) (*model.Host, error) {
	var (
		host *model.Host
	)

	switch hostParam.(type) {
	case string:
		host := model.NewHost()
		host.ID = hostParam.(string)
	case *model.Host:
		host = hostParam.(*model.Host)
	default:
		panic("hostParam must be a string or a *model.Host!")
	}

	out, err := c.EC2.DescribeInstances(&ec2.DescribeInstancesInput{
		InstanceIds: []*string{aws.String(id)},
	})
	if err != nil {
		return nil, err
	}
	instance := out.Reservations[0].Instances[0]
	host, err := c.readHost(id)
	if err != nil {
		host = &api.Host{
			ID: *instance.InstanceId,
		}
	}

	host.State, err = getState(instance.State)
	if err != nil {
		return nil, err
	}
	tpl, err := c.GetTemplate(*instance.InstanceType)
	if err != nil {
		return nil, err
	}
	host.Size = tpl.HostSize
	v4IPs := []string{}
	for _, nif := range instance.NetworkInterfaces {
		v4IPs = append(v4IPs, *nif.PrivateIpAddress)
	}
	accessAddr := ""
	if instance.PublicIpAddress != nil {
		accessAddr = *instance.PublicIpAddress
	}
	host.PrivateIPsV4 = v4IPs
	host.AccessIPv4 = accessAddr

	return host, nil
}
