***************
*** 21,26 ****
  	"fmt"
  	"net"
  	"net/http"
  	"time"
  
  	"github.com/CS-SI/SafeScale/lib/utils"
--- 21,27 ----
  	"fmt"
  	"net"
  	"net/http"
+ 	"os"
  	"time"
  
  	"github.com/CS-SI/SafeScale/lib/utils"
***************
*** 243,249 ****
  			err.Argument = "ServiceClient"
  			return nil, err
  		}
- 		flavorID, err := flavors.IDFromName(sc, opts.FlavorName)
  		if err != nil {
  			return nil, err
  		}
--- 244,250 ----
  			err.Argument = "ServiceClient"
  			return nil, err
  		}
+ 		flavorID, err := IDFromName(sc, opts.FlavorName)
  		if err != nil {
  			return nil, err
  		}
***************
*** 418,428 ****
  		VolumeType:          "SSD",
  		VolumeSize:          template.DiskSize,
  	}
  	// Defines server
  	userDataPhase1, err := userData.Generate("phase1")
  	if err != nil {
  		return nil, userData, err
  	}
  	srvOpts := serverCreateOpts{
  		Name:             request.ResourceName,
  		SecurityGroups:   []string{s.SecurityGroup.Name},
--- 458,475 ----
  		VolumeType:          "SSD",
  		VolumeSize:          template.DiskSize,
  	}
+ 
  	// Defines server
  	userDataPhase1, err := userData.Generate("phase1")
  	if err != nil {
  		return nil, userData, err
  	}
+ 
+ 	// FIXME: Change volume size
+ 	metadata := make(map[string]string)
+ 	metadata["ManagedBy"] = "safescale"
+ 	metadata["DeclaredInBucket"] = s.cfgOpts.MetadataBucket
+ 
  	srvOpts := serverCreateOpts{
  		Name:             request.ResourceName,
  		SecurityGroups:   []string{s.SecurityGroup.Name},
***************
*** 430,436 ****
  		FlavorRef:        request.TemplateID,
  		UserData:         userDataPhase1,
  		AvailabilityZone: az,
  	}
  	// Defines host "Extension bootfromvolume" options
  	bdOpts := bootdiskCreateOptsExt{
  		CreateOptsBuilder: srvOpts,
--- 477,485 ----
  		FlavorRef:        request.TemplateID,
  		UserData:         userDataPhase1,
  		AvailabilityZone: az,
+ 		Metadata:         metadata,
  	}
+ 
  	// Defines host "Extension bootfromvolume" options
  	bdOpts := bootdiskCreateOptsExt{
  		CreateOptsBuilder: srvOpts,
***************
*** 552,559 ****
  		temporal.GetLongOperationTimeout(),
  	)
  	if retryErr != nil {
- 		err = retryErr
- 		return nil, userData, err
  	}
  	if host == nil {
  		return nil, userData, fail.Errorf(fmt.Sprintf("unexpected problem creating host"), nil)
--- 601,607 ----
  		temporal.GetLongOperationTimeout(),
  	)
  	if retryErr != nil {
+ 		return nil, userData, retryErr
  	}
  	if host == nil {
  		return nil, userData, fail.Errorf(fmt.Sprintf("unexpected problem creating host"), nil)
***************
*** 698,710 ****
  			return nil, err
  		}
  
  		err = s.complementHost(host, server)
  		if err != nil {
  			return nil, err
  		}
  
- 		if !host.OK() {
- 			logrus.Warnf("[TRACE] Unexpected host status: %s", spew.Sdump(host))
  		}
  	default:
  		host.LastState = serverState
--- 746,766 ----
  			return nil, err
  		}
  
+ 		if forensics := os.Getenv("SAFESCALE_FORENSICS"); forensics != "" {
+ 			// FIXME: Get creation time and/or metadata
+ 			logrus.Warn(spew.Sdump(server))
+ 			logrus.Warn(spew.Sdump(server.Created))
+ 		}
+ 
  		err = s.complementHost(host, server)
  		if err != nil {
  			return nil, err
  		}
  
+ 		if forensics := os.Getenv("SAFESCALE_FORENSICS"); forensics != "" {
+ 			if !host.OK() {
+ 				logrus.Warnf("[TRACE] Unexpected host status: %s", spew.Sdump(host))
+ 			}
  		}
  	default:
  		host.LastState = serverState
***************
*** 812,825 ****
  	}
  
  	host.LastState = toHostState(server.Status)
- 	// VPL: I don't get the point of this...
- 	// switch host.LastState {
- 	// case hoststate.STARTED, hoststate.STOPPED:
- 	//	// continue
- 	// default:
- 	//	logrus.Warnf("[TRACE] Unexpected host's last state: %v", host.LastState)
- 	// }
- 	// ENDVPL
  
  	// Updates Host Property propsv1.HostDescription
  	err = host.Properties.LockForWrite(hostproperty.DescriptionV1).ThenUse(
--- 935,941 ----
  	}
  
  	host.LastState = toHostState(server.Status)
+ 
  
  	// Updates Host Property propsv1.HostDescription
  	err = host.Properties.LockForWrite(hostproperty.DescriptionV1).ThenUse(
***************
*** 974,982 ****
  			}
  
  			for _, srv := range list {
  				h := abstract.NewHost()
- 				h.ID = srv.ID
- 				err := s.complementHost(h, &srv)
  				if err != nil {
  					return false, err
  				}
--- 1090,1099 ----
  			}
  
  			for _, srv := range list {
+ 				theSrv := srv
  				h := abstract.NewHost()
+ 				h.ID = theSrv.ID
+ 				err := s.complementHost(h, &theSrv)
  				if err != nil {
  					return false, err
  				}
